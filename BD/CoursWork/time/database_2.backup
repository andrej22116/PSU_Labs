--
-- PostgreSQL database dump
--

-- Dumped from database version 10.4
-- Dumped by pg_dump version 10.4

-- Started on 2019-01-02 14:03:22

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 293 (class 1255 OID 50335)
-- Name: function_get_games_list_with_authors(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.function_get_games_list_with_authors(p_offset integer, p_limit integer) RETURNS TABLE(id_game integer, game_name text, date_of_release_game date, game_cost integer, id_maker integer, game_description text, game_purchase_count integer, maker_name text)
    LANGUAGE sql SECURITY DEFINER
    AS $$	select games.*, makers.maker_name
	from games inner join makers on games.id_maker = makers.id
	limit p_limit
	offset p_offset;
$$;


ALTER FUNCTION public.function_get_games_list_with_authors(p_offset integer, p_limit integer) OWNER TO postgres;

--
-- TOC entry 249 (class 1255 OID 75870)
-- Name: private_function_add_comment(uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_add_comment(user_id uuid, comment_text text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
	declare
		new_comment_id uuid;
	
	begin
		insert into commentaries(id_uuid_user, "comment") 
			values(user_id, comment_text)
			returning id_uuid into new_comment_id;
		
		return new_comment_id;
	end
$$;


ALTER FUNCTION public.private_function_add_comment(user_id uuid, comment_text text) OWNER TO postgres;

--
-- TOC entry 295 (class 1255 OID 75789)
-- Name: private_function_buy(uuid, text, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_buy(user_id uuid, description text, cost double precision) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
	declare
	new_user_money_amount float;
	new_purchase_uuid uuid;

	begin
		update user_purses
			set user_money = user_money - cost
			where id_uuid_user = user_id returning user_money into new_user_money_amount;
		
		if ( new_user_money_amount is null ) then
			raise 'User haven''t purse!';
		end if;
	
		insert into purchases(id_uuid_user, purchase_discription, "cost")
			values (user_id, description, cost) returning id_uuid into new_purchase_uuid;
		
		return new_purchase_uuid;
	end
$$;


ALTER FUNCTION public.private_function_buy(user_id uuid, description text, cost double precision) OWNER TO postgres;

--
-- TOC entry 289 (class 1255 OID 74971)
-- Name: private_function_check_permissions(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_check_permissions(user_token text, minimal_user_permission_level integer) RETURNS boolean
    LANGUAGE sql
    AS $$
	select exists (
		select user_sessions.token
		from user_sessions inner join users on user_sessions.id_uuid_user = users.id_uuid
		where users.id_role >= minimal_user_permission_level and user_token = user_sessions.token
	)
$$;


ALTER FUNCTION public.private_function_check_permissions(user_token text, minimal_user_permission_level integer) OWNER TO postgres;

--
-- TOC entry 341 (class 1255 OID 84026)
-- Name: private_function_delete_comment(uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_delete_comment(comment_id uuid, user_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
	declare
		deleted_rows bigint;
	begin
		with delete_result as (
			delete from commentaries 
				where id_uuid = comment_id and id_uuid_user = user_id
				returning *
		)
		select count(*) into deleted_rows
			from delete_result;		
		
		if ( deleted_rows <> 1 ) then
			raise 'Error on delete comment!';
		end if;
	end
$$;


ALTER FUNCTION public.private_function_delete_comment(comment_id uuid, user_id uuid) OWNER TO postgres;

--
-- TOC entry 288 (class 1255 OID 75585)
-- Name: private_function_generate_long_hash(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_generate_long_hash(target_text text) RETURNS text
    LANGUAGE plpgsql
    AS $$
	begin
		return crypt(target_text, gen_salt('bf', 8));
	end
$$;


ALTER FUNCTION public.private_function_generate_long_hash(target_text text) OWNER TO postgres;

--
-- TOC entry 246 (class 1255 OID 75586)
-- Name: private_function_generate_short_hash(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_generate_short_hash(target_text text) RETURNS text
    LANGUAGE plpgsql
    AS $$
	begin
		return encode(digest(target_text, 'sha1'), 'hex');
	end
$$;


ALTER FUNCTION public.private_function_generate_short_hash(target_text text) OWNER TO postgres;

--
-- TOC entry 283 (class 1255 OID 92248)
-- Name: private_function_get_developer_id(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_get_developer_id(user_id uuid) RETURNS integer
    LANGUAGE sql
    AS $$
	select users_developers.id_developer
	from users_developers
	where users_developers.id_uuid_user = user_id;
$$;


ALTER FUNCTION public.private_function_get_developer_id(user_id uuid) OWNER TO postgres;

--
-- TOC entry 276 (class 1255 OID 92245)
-- Name: private_function_get_game_id_and_info(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_get_game_id_and_info(target_game_name text, OUT game_id uuid, OUT game_cost double precision, OUT game_discount double precision, OUT developer_id integer) RETURNS record
    LANGUAGE plpgsql
    AS $$
	begin
		select games.id_uuid, games.game_cost, games.discount, games.id_developer
		into game_id, game_cost, game_discount, developer_id
			from games
			where games.game_name = target_game_name;
		
		if ( game_id is null ) then
			raise 'Game ''%'' not found!', target_game_name;
		end if;
	end
$$;


ALTER FUNCTION public.private_function_get_game_id_and_info(target_game_name text, OUT game_id uuid, OUT game_cost double precision, OUT game_discount double precision, OUT developer_id integer) OWNER TO postgres;

--
-- TOC entry 266 (class 1255 OID 75873)
-- Name: private_function_get_game_id_by_name(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_get_game_id_by_name(target_game_name text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
	declare
		game_id_ uuid;
	
	begin
		select game_id into game_id_
			from private_function_get_game_id_and_info(target_game_name);
		
		return game_id_;
	end
$$;


ALTER FUNCTION public.private_function_get_game_id_by_name(target_game_name text) OWNER TO postgres;

--
-- TOC entry 301 (class 1255 OID 84024)
-- Name: private_function_get_permission_level(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_get_permission_level(user_token text) RETURNS integer
    LANGUAGE sql
    AS $$
	select users.id_role
	from user_sessions inner join users on user_sessions.id_uuid_user = users.id_uuid
	where user_token = user_sessions.token;
$$;


ALTER FUNCTION public.private_function_get_permission_level(user_token text) OWNER TO postgres;

--
-- TOC entry 305 (class 1255 OID 75788)
-- Name: private_function_get_user_id_by_nickname(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_get_user_id_by_nickname(user_nickname text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
	declare
	user_id uuid;
	
	begin
		select users.id_uuid into user_id
			from  users
			where users.user_nickname = user_nickname;
		
		return user_id;
	end
$$;


ALTER FUNCTION public.private_function_get_user_id_by_nickname(user_nickname text) OWNER TO postgres;

--
-- TOC entry 254 (class 1255 OID 75786)
-- Name: private_function_get_user_id_by_token(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_get_user_id_by_token(user_token text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
	declare
	user_id uuid;
	
	begin	
		select user_sessions.id_uuid_user into user_id
			from  user_sessions
			where user_sessions.token = user_token;
		
		return user_id;
	end
$$;


ALTER FUNCTION public.private_function_get_user_id_by_token(user_token text) OWNER TO postgres;

--
-- TOC entry 347 (class 1255 OID 75588)
-- Name: private_function_get_user_nickname(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_get_user_nickname(user_token text) RETURNS text
    LANGUAGE plpgsql
    AS $$
	declare
	user_login text;
	
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		select users.user_nickname into user_login
			from users inner join user_sessions on users.id_uuid = user_sessions.id_uuid_user
			where user_sessions.token = user_token;
		
		return user_login;
	end
$$;


ALTER FUNCTION public.private_function_get_user_nickname(user_token text) OWNER TO postgres;

--
-- TOC entry 257 (class 1255 OID 92230)
-- Name: private_function_is_developer(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_is_developer(user_id uuid) RETURNS boolean
    LANGUAGE sql
    AS $$
	select exists(
		select *
		from users_developers
		where users_developers.id_uuid_user = user_id			
	);
$$;


ALTER FUNCTION public.private_function_is_developer(user_id uuid) OWNER TO postgres;

--
-- TOC entry 274 (class 1255 OID 92232)
-- Name: private_function_is_developer_of_game(uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_is_developer_of_game(user_id uuid, game_id uuid) RETURNS boolean
    LANGUAGE sql
    AS $$
	select exists(
		select *
		from users_developers
			inner join developers on users_developers.id_developer = developers.id
			inner join games on developers.id = games.id_developer
		where users_developers.id_uuid_user = user_id and games.id_uuid = game_id
	);
$$;


ALTER FUNCTION public.private_function_is_developer_of_game(user_id uuid, game_id uuid) OWNER TO postgres;

--
-- TOC entry 338 (class 1255 OID 92231)
-- Name: private_function_is_main_developer(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_is_main_developer(user_id uuid) RETURNS boolean
    LANGUAGE sql
    AS $$
	select exists(
		select *
		from users_developers
		where users_developers.id_uuid_user = user_id and users_developers.main_developer
	);
$$;


ALTER FUNCTION public.private_function_is_main_developer(user_id uuid) OWNER TO postgres;

--
-- TOC entry 307 (class 1255 OID 92233)
-- Name: private_function_is_main_developer_of_game(uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_is_main_developer_of_game(user_id uuid, game_id uuid) RETURNS boolean
    LANGUAGE sql
    AS $$
	select exists(
		select *
		from users_developers
			inner join developers on users_developers.id_developer = developers.id
			inner join games on developers.id = games.id_developer
		where 	users_developers.id_uuid_user = user_id and
				games.id_uuid = game_id and
				users_developers.main_developer
	);
$$;


ALTER FUNCTION public.private_function_is_main_developer_of_game(user_id uuid, game_id uuid) OWNER TO postgres;

--
-- TOC entry 261 (class 1255 OID 92213)
-- Name: private_function_modify_comment(uuid, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_modify_comment(comment_id uuid, user_id uuid, new_comment_text text) RETURNS void
    LANGUAGE plpgsql
    AS $$
	declare
		updated_rows bigint;

	begin
		with update_result as (
			update commentaries set
				"comment" = new_comment_text,
				modify_time = localtimestamp
				where id_uuid = comment_id and id_uuid_user = user_id
				returning *
		)
		select count(*) into updated_rows
			from update_result;
		
		if ( updated_rows <> 1 ) then
			raise 'Error on modify comment!';
		end if;
	end
$$;


ALTER FUNCTION public.private_function_modify_comment(comment_id uuid, user_id uuid, new_comment_text text) OWNER TO postgres;

--
-- TOC entry 279 (class 1255 OID 92244)
-- Name: private_function_pay_developer_for_purchase(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_pay_developer_for_purchase(developer_id integer, money double precision) RETURNS void
    LANGUAGE sql
    AS $$
	update developers
		set developer_money = developer_money + money * 0.85
		where id = developer_id;
$$;


ALTER FUNCTION public.private_function_pay_developer_for_purchase(developer_id integer, money double precision) OWNER TO postgres;

--
-- TOC entry 355 (class 1255 OID 75587)
-- Name: private_function_test_long_hash(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_test_long_hash(target_text text, text_hash text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
	begin
		return text_hash = crypt(target_text, text_hash);
	end
$$;


ALTER FUNCTION public.private_function_test_long_hash(target_text text, text_hash text) OWNER TO postgres;

--
-- TOC entry 282 (class 1255 OID 92368)
-- Name: private_function_user_have_game(uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.private_function_user_have_game(user_id uuid, game_id uuid) RETURNS boolean
    LANGUAGE sql
    AS $$
	select exists (
		select * from user_games 
		where 	user_games.id_uuid_user = user_id and
				user_games.id_uuid_game = game_id
	);
$$;


ALTER FUNCTION public.private_function_user_have_game(user_id uuid, game_id uuid) OWNER TO postgres;

--
-- TOC entry 345 (class 1255 OID 84022)
-- Name: public_function_add_comment_for_game(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_add_comment_for_game(user_token text, game_name text, comment_text text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		game_id uuid;
		new_comment_id uuid;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
		game_id := private_function_get_game_id_by_name(game_name);
		
		new_comment_id := private_function_add_comment(user_id, comment_text);
		insert into games_commentaries(id_uuid_game, id_uuid_comment) 
			values(game_id, new_comment_id);
		
		return new_comment_id;
	end
$$;


ALTER FUNCTION public.public_function_add_comment_for_game(user_token text, game_name text, comment_text text) OWNER TO postgres;

--
-- TOC entry 324 (class 1255 OID 92249)
-- Name: public_function_add_game(text, text, double precision, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_add_game(user_token text, game_name text, game_cost double precision, game_description text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		developer_id integer;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		if ( private_function_is_main_developer(user_id) = false ) then
			raise 'Permission denied!';
		end if;
	
		developer_id := private_function_get_developer_id(user_id);
	
		insert into games("game_name", "date_of_release_game", "game_cost", "id_developer", "game_description")
			values(game_name, current_date, game_cost, developer_id, game_description);
	end
$$;


ALTER FUNCTION public.public_function_add_game(user_token text, game_name text, game_cost double precision, game_description text) OWNER TO postgres;

--
-- TOC entry 326 (class 1255 OID 92247)
-- Name: public_function_add_game_addon(text, text, text, double precision, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_add_game_addon(user_token text, game_name text, addon_name text, addon_cost double precision, addon_description text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;	
		game_id uuid;
		game_addon_id uuid;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
		game_id := private_function_get_game_id_by_name(game_name);
	
		if ( private_function_is_main_developer_of_game(user_id, game_id) = false ) then
			raise 'Permission denied!';
		end if;
	
		insert into games_addons(addon_name, addon_cost, addon_description)
			values(addon_name, addon_cost, addon_description)
			returning id_uuid into game_addon_id;
		
		insert into games_addons_list(id_uuid_game, id_uuid_addon)
			values(game_id, game_addon_id);
	end
$$;


ALTER FUNCTION public.public_function_add_game_addon(user_token text, game_name text, addon_name text, addon_cost double precision, addon_description text) OWNER TO postgres;

--
-- TOC entry 256 (class 1255 OID 92369)
-- Name: public_function_add_game_to_desired_games(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_add_game_to_desired_games(user_token text, target_game_name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		game_id uuid;
		
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
		game_id := private_function_get_game_id_by_name(target_game_name);
	
		if ( private_function_user_have_game(user_id, game_id) ) then
			raise 'User have this game!';
		end if;
	
		insert into desired_games(id_uuid_user, id_uuid_game)
			values (user_id, game_id);
	end
$$;


ALTER FUNCTION public.public_function_add_game_to_desired_games(user_token text, target_game_name text) OWNER TO postgres;

--
-- TOC entry 292 (class 1255 OID 75787)
-- Name: public_function_buy_developer_status(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_buy_developer_status(user_token text, developer_name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		purchase_id uuid;
		developer_id integer;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		purchase_id := private_function_buy(user_id, 'Buying Developer Status', public_function_get_developer_status_cost());
		
		insert into developers(developer_name) 
			values(developer_name) 
			returning id into developer_id;
	
		insert into developer_status_purchases(id_developer, id_uuid_purchase) 
			values(developer_id, purchase_id);
	
		insert into users_developers(id_uuid_user, id_developer, main_developer) 
			values(user_id, developer_id, true);
	end
$$;


ALTER FUNCTION public.public_function_buy_developer_status(user_token text, developer_name text) OWNER TO postgres;

--
-- TOC entry 247 (class 1255 OID 75770)
-- Name: public_function_buy_game(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_buy_game(user_token text, target_game_name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		game_id uuid;
		game_cost float;
		game_discount float;
		game_developer_id integer;
		purchase_id uuid;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		select * into game_id, game_cost, game_discount, game_developer_id
		from private_function_get_game_id_and_info(target_game_name);
		
		game_cost := game_cost - game_cost * game_discount;
	
		purchase_id := private_function_buy(user_id, 'Buying a game ' || target_game_name || ' for personal use.', game_cost);
	
		insert into game_purchases(id_uuid_game, id_uuid_purchase)
			values(game_id, purchase_id);
		
		insert into user_games(id_uuid_user, id_uuid_game) 
			values(user_id, game_id);
			
		perform private_function_pay_developer_for_purchase(game_developer_id, game_cost);
		
	end
$$;


ALTER FUNCTION public.public_function_buy_game(user_token text, target_game_name text) OWNER TO postgres;

--
-- TOC entry 333 (class 1255 OID 92313)
-- Name: public_function_buy_game_addon(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_buy_game_addon(user_token text, target_game_name text, target_addon_name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		game_id_ uuid;
		game_developer_id integer;
		game_addon_id uuid;
		game_addon_cost float;
		purchase_id uuid;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		select game_id, developer_id into game_id_, game_developer_id
		from private_function_get_game_id_and_info(target_game_name);
	
		select games_addons.id_uuid, games_addons.addon_cost into game_addon_id, game_addon_cost
			from games_addons
				inner join games_addons_list on games_addons.id_uuid = games_addons_list.id_uuid_addon
			where games_addons.addon_name = target_addon_name and
					games_addons_list.id_uuid_game = game_id_;
		
		if ( game_addon_id is null ) then
			raise 'Addon ''%'' for game ''%'' not found!', target_addon_name, target_game_name;
		end if;
	
		purchase_id := private_function_buy(user_id, 'Buying a game addon' || target_addon_name || ' for personal use.', game_addon_cost);
	
		insert into game_addon_purchases(id_uuid_game_addon, id_uuid_purchase)
			values(game_addon_id, purchase_id);
		
		insert into user_game_addons(id_uuid_user, id_uuid_game_addon) 
			values(user_id, game_addon_id);
			
		perform private_function_pay_developer_for_purchase(game_developer_id, game_addon_cost);
		
	end
$$;


ALTER FUNCTION public.public_function_buy_game_addon(user_token text, target_game_name text, target_addon_name text) OWNER TO postgres;

--
-- TOC entry 357 (class 1255 OID 75782)
-- Name: public_function_delete_account(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_delete_account(user_token text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		purchase_ids record;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);	
	
		delete from users where id_uuid = user_id;
	end
$$;


ALTER FUNCTION public.public_function_delete_account(user_token text) OWNER TO postgres;

--
-- TOC entry 327 (class 1255 OID 84021)
-- Name: public_function_delete_comment_for_game(text, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_delete_comment_for_game(user_token text, comment_uuid uuid) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_permission_level integer;
		user_id uuid;
		game_id uuid;
		new_comment_id uuid;

	begin
		user_permission_level := private_function_get_permission_level(user_token);
		
		if ( user_permission_level is null ) then
			raise 'Permission denied!';
		end if;
	
		case
			when user_permission_level = 0 then
				user_id := private_function_get_user_id_by_token(user_token);
				execute private_function_delete_comment(comment_uuid, user_id);
			
			when user_permission_level > 0 then
				delete from games_commentaries where games_commentaries.id_uuid_comment = comment_uuid;
		end case;
		
	end
$$;


ALTER FUNCTION public.public_function_delete_comment_for_game(user_token text, comment_uuid uuid) OWNER TO postgres;

--
-- TOC entry 278 (class 1255 OID 92219)
-- Name: public_function_get_cooments_for_game(text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_cooments_for_game(name_of_game text, commemts_amount integer, list_offset integer) RETURNS TABLE(id_uuid uuid, nickname text, role text, status text, add_comment_time timestamp without time zone, modify_comment_time timestamp without time zone, comment text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
select 		commentaries.id_uuid,
			users.user_nickname,
			roles.role_name,
			statuses.status_name,
			commentaries.comment_time,
			commentaries.modify_time,
			commentaries."comment"	
	from  	games
			inner join 	games_commentaries 	on games_commentaries.id_uuid_game = games.id_uuid
			inner join 	commentaries 		on games_commentaries.id_uuid_comment = commentaries.id_uuid
			inner join 	users 				on commentaries.id_uuid_user = users.id_uuid
			left join 	user_statuses 		on users.id_uuid = user_statuses.id_uuid_user
			left join 	statuses 			on user_statuses.id_status = statuses.id	
			inner join 	roles				on users.id_role = roles.id
	where	games.game_name = name_of_game
	order by commentaries.comment_time asc
	limit 	commemts_amount
	offset 	list_offset;
$$;


ALTER FUNCTION public.public_function_get_cooments_for_game(name_of_game text, commemts_amount integer, list_offset integer) OWNER TO postgres;

--
-- TOC entry 272 (class 1255 OID 92376)
-- Name: public_function_get_current_user_info(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_current_user_info(user_token text) RETURNS TABLE(user_nickname text, user_role text, user_status text, user_money double precision, user_cashback double precision, user_personal_discount double precision)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise exception using message = 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		return query
		select 	users.user_nickname, roles.role_name,
				statuses.status_name, user_purses.user_money,
				user_purses.cashback, user_purses.personal_discount
		from	users
				inner join roles on users.id_role = roles.id
				inner join user_statuses on user_statuses.id_uuid_user = user_id
				inner join statuses on user_statuses.id_status = statuses.id
				inner join user_purses on users.id_uuid = user_purses.id_uuid_user
		where	users.id_uuid = user_id;
	end
$$;


ALTER FUNCTION public.public_function_get_current_user_info(user_token text) OWNER TO postgres;

--
-- TOC entry 344 (class 1255 OID 108760)
-- Name: public_function_get_current_user_profile(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_current_user_profile(user_token text) RETURNS TABLE(role_id integer, user_role boolean)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise exception using message = 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		return query
		select 	users.id_role, users_developers.main_developer
		from	users
				left join users_developers on users_developers.id_uuid_user = users.id_uuid
		where	users.id_uuid = user_id;
	end
$$;


ALTER FUNCTION public.public_function_get_current_user_profile(user_token text) OWNER TO postgres;

--
-- TOC entry 346 (class 1255 OID 75578)
-- Name: public_function_get_developer_info(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_developer_info(name text) RETURNS TABLE(developer_name text, developer_description text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	developers.developer_name,
			developers.developer_description
	from developers
	where developers.developer_name = name;
$$;


ALTER FUNCTION public.public_function_get_developer_info(name text) OWNER TO postgres;

--
-- TOC entry 262 (class 1255 OID 92218)
-- Name: public_function_get_developer_of_most_discussed_game(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_developer_of_most_discussed_game() RETURNS TABLE(developer_name text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	developers.developer_name
	from	developers
			inner join games				on games.id_developer = developers.id
			inner join games_commentaries	on games_commentaries.id_uuid_game = games.id_uuid
			inner join commentaries			on games_commentaries.id_uuid_comment = commentaries.id_uuid
	group by developers.developer_name
	order by count(commentaries.id_uuid) desc, max(commentaries.comment_time) desc;
$$;


ALTER FUNCTION public.public_function_get_developer_of_most_discussed_game() OWNER TO postgres;

--
-- TOC entry 329 (class 1255 OID 75783)
-- Name: public_function_get_developer_status_cost(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_developer_status_cost() RETURNS double precision
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	begin
		return 99.0;
	end
$$;


ALTER FUNCTION public.public_function_get_developer_status_cost() OWNER TO postgres;

--
-- TOC entry 270 (class 1255 OID 108759)
-- Name: public_function_get_full_game_info(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_full_game_info(target_game_name text) RETURNS TABLE(game_name text, game_cost double precision, discount real, date_of_release_game date, game_description text, developer_name text, game_genres text[], game_tags text[], game_devices text[])
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		game_id uuid;
		game_genres text[];
		game_tags text[];
		game_devices text[];
		
	begin
		game_id := private_function_get_game_id_by_name(target_game_name);
		
		game_genres := array(
			select 	games_genres.genre_name
			from 	games_genres
					inner join games_genres_list on games_genres.id = games_genres_list.id_genre
			where	games_genres_list.id_uuid_game = game_id
		);
	
		game_tags := array(
			select 	games_tags.tag_name
			from 	games_tags
					inner join games_tags_list on games_tags.id = games_tags_list.id_tag
			where	games_tags_list.id_uuid_game = game_id
		);
	
		game_devices := array(
			select 	devices.device_name
			from 	devices
					inner join games_supported_devices on devices.id = games_supported_devices.id_device
			where	games_supported_devices.id_uuid_game = game_id
		);
	
		return query
		select 	games.game_name, games.game_cost, games.discount,
				games.date_of_release_game, games.game_description,
				developers.developer_name, game_genres, game_tags, game_devices
		from	games
				left join developers on games.id_developer = developers.id
		where	games.id_uuid = game_id and games.available;
	end
$$;


ALTER FUNCTION public.public_function_get_full_game_info(target_game_name text) OWNER TO postgres;

--
-- TOC entry 316 (class 1255 OID 92227)
-- Name: public_function_get_game_addons(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_game_addons(target_game_name text) RETURNS TABLE(addon_name text, addon_cost double precision, addon_description text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	games_addons.addon_name, games_addons.addon_cost, games_addons.addon_description
	from	games_addons
			inner join games_addons_list	on games_addons.id_uuid = games_addons_list.id_uuid_addon
			inner join games				on games.id_uuid = games_addons_list.id_uuid_game
	where	games.game_name = target_game_name;
$$;


ALTER FUNCTION public.public_function_get_game_addons(target_game_name text) OWNER TO postgres;

--
-- TOC entry 241 (class 1255 OID 100566)
-- Name: public_function_get_game_commentaries(text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_game_commentaries(target_game_name text, comment_amount integer, comments_offset integer) RETURNS TABLE(user_nickname text, comment_time timestamp without time zone, modify_time timestamp without time zone, comment text, id uuid)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	users.user_nickname, commentaries.comment_time, commentaries.modify_time,
			commentaries."comment", commentaries.id_uuid
	from 	users
			inner join commentaries 		on commentaries.id_uuid_user = users.id_uuid
			inner join games_commentaries 	on games_commentaries.id_uuid_comment = commentaries.id_uuid
			inner join games 				on games.id_uuid = games_commentaries.id_uuid_game
	where 	games.game_name = target_game_name
	order by commentaries.comment_time
	limit 	comment_amount
	offset	comments_offset;
$$;


ALTER FUNCTION public.public_function_get_game_commentaries(target_game_name text, comment_amount integer, comments_offset integer) OWNER TO postgres;

--
-- TOC entry 330 (class 1255 OID 92372)
-- Name: public_function_get_game_list(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_game_list(game_amount integer, list_offset integer) RETURNS TABLE(game_name text, game_cost double precision, discount real, date_of_release_game date)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	games.game_name,
			games.game_cost,
			games.discount,
			games.date_of_release_game
	from games
	where available
	offset list_offset
	limit game_amount;
$$;


ALTER FUNCTION public.public_function_get_game_list(game_amount integer, list_offset integer) OWNER TO postgres;

--
-- TOC entry 309 (class 1255 OID 92371)
-- Name: public_function_get_game_with_developer_list(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_game_with_developer_list(game_amount integer, list_offset integer) RETURNS TABLE(game_name text, game_cost double precision, discount real, date_of_release_game date, game_description text, developer_name text, developer_description text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	games.game_name,
			games.game_cost,
			games.discount,
			games.date_of_release_game,
			games.game_description,
			developers.developer_name,
			developers.developer_description
	from games inner join developers on games.id_developer = developers.id
	where available
	offset list_offset
	limit game_amount;
$$;


ALTER FUNCTION public.public_function_get_game_with_developer_list(game_amount integer, list_offset integer) OWNER TO postgres;

--
-- TOC entry 284 (class 1255 OID 92373)
-- Name: public_function_get_games_nobody_bought(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_games_nobody_bought(game_amount integer, list_offset integer) RETURNS TABLE(game_name text, game_cost double precision, game_discount real, date_of_release_game date)
    LANGUAGE sql
    AS $$
	select 	games.game_name, games.game_cost, games.discount, games.date_of_release_game
	from	games
	where	games.available and games.id_uuid not in (
		select user_games.id_uuid_game from user_games
	)
	limit game_amount
	offset list_offset;
$$;


ALTER FUNCTION public.public_function_get_games_nobody_bought(game_amount integer, list_offset integer) OWNER TO postgres;

--
-- TOC entry 245 (class 1255 OID 92216)
-- Name: public_function_get_summary_game_cost_with_addons(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_summary_game_cost_with_addons(user_token text, name_of_game text) RETURNS TABLE(game_cost double precision, summary_addons_cost double precision)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		game_id uuid;
	
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		return query
			select games.game_cost, sum(games_addons.addon_cost::float) as summary_addons_cost
			from 	games
					inner join user_games			on user_games.id_uuid_game = games.id_uuid
					left join games_addons_list 	on games.id_uuid = games_addons_list.id_uuid_game
					left join games_addons 		on games_addons.id_uuid = games_addons_list.id_uuid_addon
					left join user_game_addons		on user_game_addons.id_uuid_game_addon = games_addons.id_uuid
			where	games.game_name = name_of_game and
					user_games.id_uuid_user = user_id and
					( (games_addons.id_uuid is not null and
							user_game_addons.id_uuid_game_addon is not null and
							user_game_addons.id_uuid_user = user_id) or
					  (games_addons.id_uuid is null and user_game_addons.id_uuid_game_addon is null) )
			group by games.game_cost;
	end
$$;


ALTER FUNCTION public.public_function_get_summary_game_cost_with_addons(user_token text, name_of_game text) OWNER TO postgres;

--
-- TOC entry 297 (class 1255 OID 92324)
-- Name: public_function_get_top_spending_money(date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_top_spending_money(begin_date date, end_date date) RETURNS TABLE(user_nickname text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	users.user_nickname
	from	users
			inner join purchases on users.id_uuid = purchases.id_uuid_user
	where	purchases.purchase_date_time::date >= begin_date and
			purchases.purchase_date_time::date <= end_date
	group by users.user_nickname
	order by sum(purchases."cost"::float) desc
	limit 1;
$$;


ALTER FUNCTION public.public_function_get_top_spending_money(begin_date date, end_date date) OWNER TO postgres;

--
-- TOC entry 243 (class 1255 OID 92364)
-- Name: public_function_get_user_desired_games(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_user_desired_games(nickname text) RETURNS TABLE(desired_game text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select 	games.game_name
	from	games
			inner join desired_games 	on games.id_uuid = desired_games.id_uuid_game
			inner join users			on desired_games.id_uuid_user = users.id_uuid
	where	users.user_nickname = nickname;
$$;


ALTER FUNCTION public.public_function_get_user_desired_games(nickname text) OWNER TO postgres;

--
-- TOC entry 310 (class 1255 OID 92358)
-- Name: public_function_get_user_game_addons(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_user_game_addons(user_token text, target_game_name text) RETURNS TABLE(addon_name text, addon_description text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		game_id uuid;
	
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
		game_id := private_function_get_game_id_by_name(target_game_name);
	
		return query
			select	games_addons.addon_name, games_addons.addon_description
			from 	games_addons
					inner join games_addons_list 	on games_addons.id_uuid = games_addons_list.id_uuid_addon
					inner join user_game_addons		on games_addons_list.id_uuid_addon = user_game_addons.id_uuid_game_addon
			where 	user_game_addons.id_uuid_user = user_id and
					games_addons_list.id_uuid_game = game_id;
	end
$$;


ALTER FUNCTION public.public_function_get_user_game_addons(user_token text, target_game_name text) OWNER TO postgres;

--
-- TOC entry 244 (class 1255 OID 92374)
-- Name: public_function_get_user_games(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_get_user_games(user_token text) RETURNS TABLE(game_name text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise exception using message = 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		return query
		select 	games.game_name
		from	games
				inner join user_games on games.id_uuid = user_games.id_uuid_game
		where	user_games.id_uuid_user = user_id;
	end
$$;


ALTER FUNCTION public.public_function_get_user_games(user_token text) OWNER TO postgres;

--
-- TOC entry 361 (class 1255 OID 92363)
-- Name: public_function_lock_game(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_lock_game(user_token text, target_game_name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	begin
		if ( private_function_check_permissions(user_token, 2) = false ) then
			raise 'Permission denied!';
		end if;
	
		update games
			set available = false
			where id_uuid = target_game_name;
	end
$$;


ALTER FUNCTION public.public_function_lock_game(user_token text, target_game_name text) OWNER TO postgres;

--
-- TOC entry 339 (class 1255 OID 74950)
-- Name: public_function_login(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_login(login text, password text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		token_hash text;
		time_current timestamptz;
		user_hash_login text;
	begin
		
		select users.user_login into user_hash_login
		from users 
		where private_function_test_long_hash(login, users.user_login)
		and private_function_test_long_hash(password, users.user_password);
		if user_hash_login is null then
			raise 'Invalid login or password!';
		end if;
	
		time_current := current_timestamp;
	
		token_hash := private_function_generate_short_hash(login || password || time_current);
	
		insert into user_sessions(id_uuid_user, session_begin_time, token) values(
			(select users.id_uuid from users where users.user_login = user_hash_login),
			time_current,
			token_hash
		);
	
		return token_hash;
	end;
$$;


ALTER FUNCTION public.public_function_login(login text, password text) OWNER TO postgres;

--
-- TOC entry 358 (class 1255 OID 75637)
-- Name: public_function_logout(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_logout(user_token text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		delete from user_sessions where user_sessions.token = user_token;
	end
$$;


ALTER FUNCTION public.public_function_logout(user_token text) OWNER TO postgres;

--
-- TOC entry 304 (class 1255 OID 84023)
-- Name: public_function_modify_comment_for_game(text, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_modify_comment_for_game(user_token text, comment_uuid uuid, new_text text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;
		game_id uuid;
		new_comment_id uuid;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
		
		execute private_function_modify_comment(comment_uuid, user_id, new_text);
	end
$$;


ALTER FUNCTION public.public_function_modify_comment_for_game(user_token text, comment_uuid uuid, new_text text) OWNER TO postgres;

--
-- TOC entry 321 (class 1255 OID 75681)
-- Name: public_function_put_money(text, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_put_money(user_token text, amount_money double precision) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		user_id uuid;

	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		update user_purses
			set user_money = user_money + amount_money
			where id_uuid_user = user_id;
	end
$$;


ALTER FUNCTION public.public_function_put_money(user_token text, amount_money double precision) OWNER TO postgres;

--
-- TOC entry 348 (class 1255 OID 74938)
-- Name: public_function_registration(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_registration(login text, password text, nickname text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
		login_length integer;
		password_length integer;
		nickname_length integer;
		has_login boolean;
	begin
		login_length := length(login);
		password_length := length(password);
		
		if login_length < 6 or login_length > 32 then
			raise 'Login must be between 6 and 32 characters!';
		end if;
		
		if password_length < 6 or password_length > 64 then
			raise 'Password must be between 6 and 64 characters!';
		end if;
	
		if nickname_length < 6 or nickname_length > 32 then
			raise 'Nickname must be between 6 and 32 characters!';
		end if;
		
		select exists (select users.user_login from users where users.user_login = crypt(login, users.user_login)) into has_login;
		if has_login = true then
			raise 'This username "%" already exist!', login;
		end if;
	
		insert into users (user_login, user_password, id_role, user_nickname)
		values (private_function_generate_long_hash(login),
				private_function_generate_long_hash(password),
				0, nickname);
	end
$$;


ALTER FUNCTION public.public_function_registration(login text, password text, nickname text) OWNER TO postgres;

--
-- TOC entry 318 (class 1255 OID 75603)
-- Name: public_function_test_token(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_test_token(user_token text) RETURNS boolean
    LANGUAGE sql SECURITY DEFINER
    AS $$
	select exists(
		select token from user_sessions where token = user_token
	);
$$;


ALTER FUNCTION public.public_function_test_token(user_token text) OWNER TO postgres;

--
-- TOC entry 340 (class 1255 OID 92375)
-- Name: public_function_unlock_game(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_unlock_game(user_token text, target_game_name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	begin
		if ( private_function_check_permissions(user_token, 2) = false ) then
			raise 'Permission denied!';
		end if;
	
		update games
			set available = true
			where id_uuid = target_game_name;
	end
$$;


ALTER FUNCTION public.public_function_unlock_game(user_token text, target_game_name text) OWNER TO postgres;

--
-- TOC entry 260 (class 1255 OID 75593)
-- Name: public_function_update_login(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_update_login(user_token text, new_login text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
	user_id uuid;
	login_length integer;
	
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		login_length := length(new_login);
	
		if login_length < 6 or login_length > 32 then
			raise 'Login must be between 6 and 32 characters!';
		end if;
	
		user_id := private_function_get_user_id_by_token(user_token);
	
		update users
			set user_login = private_function_generate_long_hash(new_login)
			where id_uuid = user_id;
	end
$$;


ALTER FUNCTION public.public_function_update_login(user_token text, new_login text) OWNER TO postgres;

--
-- TOC entry 238 (class 1255 OID 75595)
-- Name: public_function_update_password(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.public_function_update_password(user_token text, old_password text, new_password text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
	declare
	old_user_password_hash text;
	user_id uuid;
	password_length integer;
	
	begin
		if ( private_function_check_permissions(user_token, 0) = false ) then
			raise 'Permission denied!';
		end if;
	
		password_length := length(new_password);
	
		if password_length < 6 or password_length > 32 then
			raise 'Password must be between 6 and 32 characters!';
		end if;

	
		user_id := private_function_get_user_id_by_token(user_token);
	
		select user_password into old_user_password_hash 
			from users
			where users.id_uuid = user_id;
		
		if ( private_function_test_long_hash(old_password, old_user_password_hash) = false ) then
			raise 'Invalid old password!';
		end if;
	
		update users
			set user_password = private_function_generate_long_hash(new_password)
			where users.id_uuid = user_id;
	end
$$;


ALTER FUNCTION public.public_function_update_password(user_token text, old_password text, new_password text) OWNER TO postgres;

--
-- TOC entry 312 (class 1255 OID 75772)
-- Name: trigger_function_on_add_new_game(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_add_new_game() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	begin
		insert into games_statistics(id_uuid_game) values(new.id_uuid);
		return new;
	end
$$;


ALTER FUNCTION public.trigger_function_on_add_new_game() OWNER TO postgres;

--
-- TOC entry 322 (class 1255 OID 75684)
-- Name: trigger_function_on_buy(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_buy() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	declare
		delta_money float;
		cashback float;
	begin
		if ( new.user_money < 0 ) then
			raise 'Error on buy. Insufficient funds!';
		end if;
		
		delta_money := old.user_money - new.user_money;
		--raise 'Old money: %, new money %, delta: %', old.user_money, new.user_money, delta_money;
	
		cashback := delta_money - delta_money * new.personal_discount;
		cashback := cashback * new.cashback;
	
		new.user_money := new.user_money + cashback;
		return new;
	end
$$;


ALTER FUNCTION public.trigger_function_on_buy() OWNER TO postgres;

--
-- TOC entry 268 (class 1255 OID 92365)
-- Name: trigger_function_on_buy_new_desired_game(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_buy_new_desired_game() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	begin
		
		delete from desired_games
			where 	desired_games.id_uuid_game = new.id_uuid_game and
					desired_games.id_uuid_user = new.id_uuid_user;
		
		return new;
	end
$$;


ALTER FUNCTION public.trigger_function_on_buy_new_desired_game() OWNER TO postgres;

--
-- TOC entry 286 (class 1255 OID 92355)
-- Name: trigger_function_on_buy_new_game(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_buy_new_game() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	declare
		user_games_amount integer;
		exists_on_statuses boolean;
	
	begin
		select count(user_games.id_uuid_user) into user_games_amount
			from user_games
			where user_games.id_uuid_user = new.id_uuid_user
			group by user_games.id_uuid_user;
		
		select exists (
			select id from statuses where statuses.id = user_games_amount
		) into exists_on_statuses;
	
		if ( exists_on_statuses ) then
			update user_statuses
				set id_status = user_games_amount
				where id_uuid_user = new.id_uuid_user;
		end if;
		
		return new;
	end
$$;


ALTER FUNCTION public.trigger_function_on_buy_new_game() OWNER TO postgres;

--
-- TOC entry 299 (class 1255 OID 75859)
-- Name: trigger_function_on_delete_account(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_delete_account() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	declare
		purchase_ids record;
	
	begin
		delete from user_purses where id_uuid_user = old.id_uuid;
		delete from user_statuses where id_uuid_user = old.id_uuid;
		delete from user_sessions where id_uuid_user = old.id_uuid;
		delete from desired_games where id_uuid_user = old.id_uuid;
		delete from games_ratings where id_uuid_user = old.id_uuid;
		delete from user_games where id_uuid_user = old.id_uuid;
		delete from user_game_addons where id_uuid_user = old.id_uuid;
	
		for purchase_ids in select id_uuid from purchases where id_uuid_user = old.id_uuid
		loop
			delete from game_purchases where id_uuid_purchase = purchase_ids.id_uuid;
			delete from game_addon_purchases where id_uuid_purchase = purchase_ids.id_uuid;
			delete from developer_status_purchases where id_uuid_purchase = purchase_ids.id_uuid;
		end loop;
	
		delete from purchases where id_uuid_user = old.id_uuid;
	
		update news set id_uuid_user = uuid_nil() where id_uuid_user = old.id_uuid;
		update commentaries set id_uuid_user = uuid_nil() where id_uuid_user = old.id_uuid;
	
		return old;
	end
$$;


ALTER FUNCTION public.trigger_function_on_delete_account() OWNER TO postgres;

--
-- TOC entry 308 (class 1255 OID 84027)
-- Name: trigger_function_on_delete_comment(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_delete_comment() RETURNS trigger
    LANGUAGE plpgsql
    AS $$	
	begin
		delete from games_commentaries where id_uuid_comment = old.id_uuid;
		delete from games_news_commentaries where id_uuid_comment = old.id_uuid;
		delete from global_news_commentaries where id_uuid_comment = old.id_uuid;
	
		return old;
	end
$$;


ALTER FUNCTION public.trigger_function_on_delete_comment() OWNER TO postgres;

--
-- TOC entry 359 (class 1255 OID 75654)
-- Name: trigger_function_on_register_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_register_user() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	begin
		insert into user_purses(id_uuid_user) values(new.id_uuid);
		insert into user_statuses(id_uuid_user, id_status) values(new.id_uuid, 0);
		return new;
	end
$$;


ALTER FUNCTION public.trigger_function_on_register_user() OWNER TO postgres;

--
-- TOC entry 323 (class 1255 OID 75600)
-- Name: trigger_function_on_user_login(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_function_on_user_login() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	begin
		if (TG_OP = 'INSERT') then
			delete from user_sessions where user_sessions.id_uuid_user = new.id_uuid_user;
			return new;
		elseif (TG_OP = 'UPDATE') then
			raise 'Can''t update rows on this table!';
		end if;
	end
$$;


ALTER FUNCTION public.trigger_function_on_user_login() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 220 (class 1259 OID 58669)
-- Name: commentaries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.commentaries (
    comment_time timestamp without time zone DEFAULT LOCALTIMESTAMP NOT NULL,
    modify_time timestamp without time zone,
    comment text NOT NULL,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id_uuid_user uuid NOT NULL,
    CONSTRAINT commentaries_check CHECK ((modify_time > comment_time)),
    CONSTRAINT commentaries_comment_check CHECK ((length(comment) > 0))
);


ALTER TABLE public.commentaries OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 16650)
-- Name: desired_games; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.desired_games (
    id_uuid_game uuid NOT NULL,
    id_uuid_user uuid NOT NULL
);


ALTER TABLE public.desired_games OWNER TO postgres;

--
-- TOC entry 234 (class 1259 OID 75804)
-- Name: developer_status_purchases; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.developer_status_purchases (
    id_developer integer NOT NULL,
    id_uuid_purchase uuid NOT NULL
);


ALTER TABLE public.developer_status_purchases OWNER TO postgres;

--
-- TOC entry 200 (class 1259 OID 16412)
-- Name: developers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.developers (
    id integer NOT NULL,
    developer_name text NOT NULL,
    developer_description text,
    developer_money double precision DEFAULT 0 NOT NULL
);


ALTER TABLE public.developers OWNER TO postgres;

--
-- TOC entry 3301 (class 0 OID 0)
-- Dependencies: 200
-- Name: TABLE developers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.developers IS 'Table of game makers!';


--
-- TOC entry 206 (class 1259 OID 16506)
-- Name: devices; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.devices (
    id smallint NOT NULL,
    device_name text NOT NULL
);


ALTER TABLE public.devices OWNER TO postgres;

--
-- TOC entry 205 (class 1259 OID 16504)
-- Name: devices_pk_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.devices_pk_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.devices_pk_id_seq OWNER TO postgres;

--
-- TOC entry 3302 (class 0 OID 0)
-- Dependencies: 205
-- Name: devices_pk_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.devices_pk_id_seq OWNED BY public.devices.id;


--
-- TOC entry 233 (class 1259 OID 75755)
-- Name: game_addon_purchases; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.game_addon_purchases (
    id_uuid_game_addon uuid NOT NULL,
    id_uuid_purchase uuid NOT NULL
);


ALTER TABLE public.game_addon_purchases OWNER TO postgres;

--
-- TOC entry 232 (class 1259 OID 75725)
-- Name: game_purchases; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.game_purchases (
    id_uuid_game uuid NOT NULL,
    id_uuid_purchase uuid NOT NULL
);


ALTER TABLE public.game_purchases OWNER TO postgres;

--
-- TOC entry 198 (class 1259 OID 16401)
-- Name: games; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games (
    game_name text NOT NULL,
    date_of_release_game date,
    game_cost double precision NOT NULL,
    id_developer integer NOT NULL,
    game_description text,
    discount real DEFAULT 0 NOT NULL,
    available boolean DEFAULT true NOT NULL,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    CONSTRAINT games_discount_check CHECK (((discount >= (0)::double precision) AND (discount <= (100)::double precision)))
);


ALTER TABLE public.games OWNER TO postgres;

--
-- TOC entry 3303 (class 0 OID 0)
-- Dependencies: 198
-- Name: TABLE games; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.games IS 'Table for information of games!';


--
-- TOC entry 204 (class 1259 OID 16474)
-- Name: games_addons; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_addons (
    addon_name text NOT NULL,
    addon_cost double precision NOT NULL,
    addon_description text,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL
);


ALTER TABLE public.games_addons OWNER TO postgres;

--
-- TOC entry 216 (class 1259 OID 16624)
-- Name: games_addons_list; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_addons_list (
    id_uuid_game uuid NOT NULL,
    id_uuid_addon uuid NOT NULL
);


ALTER TABLE public.games_addons_list OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 58699)
-- Name: games_commentaries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_commentaries (
    id_uuid_game uuid NOT NULL,
    id_uuid_comment uuid NOT NULL
);


ALTER TABLE public.games_commentaries OWNER TO postgres;

--
-- TOC entry 202 (class 1259 OID 16432)
-- Name: games_genres; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_genres (
    id integer NOT NULL,
    genre_name text NOT NULL
);


ALTER TABLE public.games_genres OWNER TO postgres;

--
-- TOC entry 203 (class 1259 OID 16443)
-- Name: games_genres_list; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_genres_list (
    id_genre integer NOT NULL,
    id_uuid_game uuid NOT NULL
);


ALTER TABLE public.games_genres_list OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 16702)
-- Name: games_images; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_images (
    game_image bytea NOT NULL,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id_uuid_game uuid NOT NULL
);


ALTER TABLE public.games_images OWNER TO postgres;

--
-- TOC entry 211 (class 1259 OID 16565)
-- Name: games_news; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_news (
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id_uuid_news uuid NOT NULL
);


ALTER TABLE public.games_news OWNER TO postgres;

--
-- TOC entry 222 (class 1259 OID 58713)
-- Name: games_news_commentaries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_news_commentaries (
    id_uuid_comment uuid NOT NULL,
    id_uuid_games_news uuid NOT NULL
);


ALTER TABLE public.games_news_commentaries OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 75335)
-- Name: games_ratings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_ratings (
    id_uuid_game uuid NOT NULL,
    id_uuid_user uuid NOT NULL,
    like_game boolean NOT NULL
);


ALTER TABLE public.games_ratings OWNER TO postgres;

--
-- TOC entry 237 (class 1259 OID 92288)
-- Name: games_statistics; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_statistics (
    id_uuid_game uuid NOT NULL,
    counting_year integer DEFAULT date_part('year'::text, CURRENT_DATE) NOT NULL,
    purchase_count integer DEFAULT 0 NOT NULL,
    view_count integer DEFAULT 0 NOT NULL,
    wishes_count integer DEFAULT 0 NOT NULL,
    likes_count integer DEFAULT 0 NOT NULL,
    dislikes_count integer DEFAULT 0 NOT NULL,
    comments_count integer DEFAULT 0 NOT NULL,
    CONSTRAINT games_statistics_comments_count_check CHECK ((comments_count >= 0)),
    CONSTRAINT games_statistics_counting_year_check CHECK (((counting_year)::double precision = date_part('year'::text, CURRENT_DATE))),
    CONSTRAINT games_statistics_dislikes_count_check CHECK ((dislikes_count >= 0)),
    CONSTRAINT games_statistics_likes_count_check CHECK ((likes_count >= 0)),
    CONSTRAINT games_statistics_purchase_count_check CHECK ((purchase_count >= 0)),
    CONSTRAINT games_statistics_view_count_check CHECK ((view_count >= 0)),
    CONSTRAINT games_statistics_wishes_count_check CHECK ((wishes_count >= 0))
);


ALTER TABLE public.games_statistics OWNER TO postgres;

--
-- TOC entry 207 (class 1259 OID 16512)
-- Name: games_supported_devices; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_supported_devices (
    id_uuid_game uuid,
    id_device smallint
);


ALTER TABLE public.games_supported_devices OWNER TO postgres;

--
-- TOC entry 214 (class 1259 OID 16592)
-- Name: games_tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_tags (
    id smallint NOT NULL,
    tag_name character varying(16) NOT NULL
);


ALTER TABLE public.games_tags OWNER TO postgres;

--
-- TOC entry 215 (class 1259 OID 16598)
-- Name: games_tags_list; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.games_tags_list (
    id_uuid_game uuid,
    id_tag integer
);


ALTER TABLE public.games_tags_list OWNER TO postgres;

--
-- TOC entry 201 (class 1259 OID 16430)
-- Name: genres_pk_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.genres_pk_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genres_pk_id_seq OWNER TO postgres;

--
-- TOC entry 3304 (class 0 OID 0)
-- Dependencies: 201
-- Name: genres_pk_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.genres_pk_id_seq OWNED BY public.games_genres.id;


--
-- TOC entry 212 (class 1259 OID 16581)
-- Name: global_news; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.global_news (
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id_uuid_news uuid NOT NULL
);


ALTER TABLE public.global_news OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 58726)
-- Name: global_news_commentaries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.global_news_commentaries (
    id_uuid_comment uuid NOT NULL,
    id_uuid_global_news uuid NOT NULL
);


ALTER TABLE public.global_news_commentaries OWNER TO postgres;

--
-- TOC entry 199 (class 1259 OID 16410)
-- Name: maker_pk_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.maker_pk_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.maker_pk_id_seq OWNER TO postgres;

--
-- TOC entry 3305 (class 0 OID 0)
-- Dependencies: 199
-- Name: maker_pk_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.maker_pk_id_seq OWNED BY public.developers.id;


--
-- TOC entry 224 (class 1259 OID 58761)
-- Name: news; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.news (
    create_time timestamp without time zone DEFAULT CURRENT_DATE NOT NULL,
    modify_time timestamp without time zone,
    news_text text NOT NULL,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id_uuid_user uuid NOT NULL,
    news_title text NOT NULL,
    CONSTRAINT news_check CHECK ((modify_time > create_time)),
    CONSTRAINT news_news_text_check CHECK ((length(news_text) > 0))
);


ALTER TABLE public.news OWNER TO postgres;

--
-- TOC entry 218 (class 1259 OID 16665)
-- Name: purchases; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.purchases (
    purchase_date_time timestamp with time zone DEFAULT now() NOT NULL,
    purchase_discription text NOT NULL,
    id_uuid_user uuid NOT NULL,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    cost double precision DEFAULT 0 NOT NULL
);


ALTER TABLE public.purchases OWNER TO postgres;

--
-- TOC entry 210 (class 1259 OID 16547)
-- Name: roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.roles (
    id smallint NOT NULL,
    role_name text NOT NULL
);


ALTER TABLE public.roles OWNER TO postgres;

--
-- TOC entry 209 (class 1259 OID 16545)
-- Name: roles_pk_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.roles_pk_id_seq
    AS smallint
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.roles_pk_id_seq OWNER TO postgres;

--
-- TOC entry 3306 (class 0 OID 0)
-- Dependencies: 209
-- Name: roles_pk_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.roles_pk_id_seq OWNED BY public.roles.id;


--
-- TOC entry 229 (class 1259 OID 75611)
-- Name: statuses; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.statuses (
    id integer NOT NULL,
    status_name text NOT NULL
);


ALTER TABLE public.statuses OWNER TO postgres;

--
-- TOC entry 228 (class 1259 OID 75609)
-- Name: statuses_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.statuses_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.statuses_id_seq OWNER TO postgres;

--
-- TOC entry 3307 (class 0 OID 0)
-- Dependencies: 228
-- Name: statuses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.statuses_id_seq OWNED BY public.statuses.id;


--
-- TOC entry 213 (class 1259 OID 16590)
-- Name: tags_pk_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.tags_pk_id_seq
    AS smallint
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tags_pk_id_seq OWNER TO postgres;

--
-- TOC entry 3308 (class 0 OID 0)
-- Dependencies: 213
-- Name: tags_pk_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.tags_pk_id_seq OWNED BY public.games_tags.id;


--
-- TOC entry 236 (class 1259 OID 75843)
-- Name: user_game_addons; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_game_addons (
    id_uuid_user uuid NOT NULL,
    id_uuid_game_addon uuid NOT NULL
);


ALTER TABLE public.user_game_addons OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 75828)
-- Name: user_games; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_games (
    id_uuid_user uuid NOT NULL,
    id_uuid_game uuid NOT NULL
);


ALTER TABLE public.user_games OWNER TO postgres;

--
-- TOC entry 231 (class 1259 OID 75638)
-- Name: user_purses; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_purses (
    id_uuid_user uuid NOT NULL,
    user_money double precision DEFAULT 0 NOT NULL,
    cashback double precision DEFAULT 0 NOT NULL,
    personal_discount double precision DEFAULT 0 NOT NULL,
    CONSTRAINT user_purses_cashback_check CHECK (((cashback >= (0)::double precision) AND (cashback <= (0.5)::double precision))),
    CONSTRAINT user_purses_personal_discount_check CHECK (((personal_discount >= (0)::double precision) AND (personal_discount <= (0.5)::double precision)))
);


ALTER TABLE public.user_purses OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 74953)
-- Name: user_sessions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_sessions (
    session_begin_time timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    token text NOT NULL,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id_uuid_user uuid NOT NULL
);


ALTER TABLE public.user_sessions OWNER TO postgres;

--
-- TOC entry 230 (class 1259 OID 75622)
-- Name: user_statuses; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_statuses (
    id_uuid_user uuid NOT NULL,
    id_status integer NOT NULL
);


ALTER TABLE public.user_statuses OWNER TO postgres;

--
-- TOC entry 208 (class 1259 OID 16534)
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    user_login text NOT NULL,
    user_password text NOT NULL,
    id_role integer NOT NULL,
    user_nickname text NOT NULL,
    id_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL
);


ALTER TABLE public.users OWNER TO postgres;

--
-- TOC entry 227 (class 1259 OID 75542)
-- Name: users_developers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users_developers (
    id_uuid_user uuid NOT NULL,
    id_developer integer NOT NULL,
    main_developer boolean DEFAULT false NOT NULL
);


ALTER TABLE public.users_developers OWNER TO postgres;

--
-- TOC entry 2943 (class 2604 OID 16415)
-- Name: developers id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.developers ALTER COLUMN id SET DEFAULT nextval('public.maker_pk_id_seq'::regclass);


--
-- TOC entry 2947 (class 2604 OID 16515)
-- Name: devices id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.devices ALTER COLUMN id SET DEFAULT nextval('public.devices_pk_id_seq'::regclass);


--
-- TOC entry 2945 (class 2604 OID 16435)
-- Name: games_genres id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_genres ALTER COLUMN id SET DEFAULT nextval('public.genres_pk_id_seq'::regclass);


--
-- TOC entry 2952 (class 2604 OID 16595)
-- Name: games_tags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_tags ALTER COLUMN id SET DEFAULT nextval('public.tags_pk_id_seq'::regclass);


--
-- TOC entry 2949 (class 2604 OID 16550)
-- Name: roles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roles ALTER COLUMN id SET DEFAULT nextval('public.roles_pk_id_seq'::regclass);


--
-- TOC entry 2968 (class 2604 OID 75614)
-- Name: statuses id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.statuses ALTER COLUMN id SET DEFAULT nextval('public.statuses_id_seq'::regclass);


--
-- TOC entry 3275 (class 0 OID 58669)
-- Dependencies: 220
-- Data for Name: commentaries; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.commentaries VALUES ('2018-12-25 02:39:31.471805', '2018-12-25 02:41:10.573854', 'I like this game!!!', '90fbd521-edea-4918-8467-dc4f7c4c30f5', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:30:45.940729', NULL, 'Обновление ребёрн - полное днище! Не советую.', '9f2ab8fd-356d-4327-ba01-587c56876dd7', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:31:38.37669', NULL, 'На Аксе качайте гарелку и крутилку!', '95906999-3b7c-45fc-b976-f27cc5b915b5', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:32:20.142517', NULL, 'Стена плоти слишком простая!', 'a6b46a6f-ceba-4c4a-905d-3b6ba247d814', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:32:54.699357', NULL, 'Инвизёры - имба! Покупайте сентри...', 'e5a6a1c0-672a-4882-8400-9ed75a8f4725', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:33:18.890732', NULL, 'Ваши Мамки под угрозой!', 'a57a252c-9a9a-42b8-84e0-2f6ceaa40338', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:37:42.14947', NULL, 'Я начал копать под собой и упал в лаву!!!', '98539141-a056-43fe-b60e-f3715361d989', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:51:51.657053', NULL, 'Криперы такие няшки! :3', '259d5975-ffab-41ee-b23f-b4fe559eb5f8', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:52:15.808186', NULL, 'Алмазы! Где мои алмазы?!', '563f5c88-4c87-47d7-958e-e74641e2e8b7', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:58:51.501291', NULL, 'Меня охраняют котики!', 'dbe46e03-74d4-41b9-9919-db05ec7f7fec', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:59:34.456419', NULL, 'Эти портальные пушки - просто прелесть!', 'b9eb3b84-11b6-45e8-84a6-b15f83065cd3', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-27 16:21:39.519649', NULL, 'Нужно больше зомби!', 'fdc5cfff-c134-4ae6-b881-fecf183f6877', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33');
INSERT INTO public.commentaries VALUES ('2018-12-30 02:13:44.628588', NULL, 'Это просто восхитительная игра! Я никак не ожидал, что эта замечтальная играв так зацепит! Я провёл в ней уже больше сотни часов и она мне начинается нравитс только больше!', '67b74dab-6480-4cb7-8c65-768777c02c97', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2018-12-31 13:12:03.618553', '2018-12-31 14:36:33.283452', 'Просто взрывные криперы-няшки! :3 Мяу :3', 'e00c6832-55fc-4f45-965e-e565c53fb6ce', '47da02c5-adde-484b-940a-bf99c92ac927');
INSERT INTO public.commentaries VALUES ('2018-12-31 13:05:12.951401', '2018-12-31 14:37:50.80759', 'Игра классная, мне нравится! трололо', 'e5f0b8c0-25a6-427d-b35f-40476d2bf7e5', '47da02c5-adde-484b-940a-bf99c92ac927');
INSERT INTO public.commentaries VALUES ('2018-12-25 23:35:02.971288', '2018-12-31 14:43:11.447316', 'Minecraft - это моя жизнь! MINECRAFT!!!!!!!!!!!!!!!!!!!!!!!', 'dc79ad6b-9273-481a-9277-3554f74868ce', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.commentaries VALUES ('2019-01-01 23:16:30.670281', NULL, 'Игруля - супер! Жалко единорогов :с', 'ee0f3e64-2670-4ed1-96f8-7b5ffd63e671', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33');
INSERT INTO public.commentaries VALUES ('2019-01-02 04:10:55.733018', NULL, 'Микс из кубов и школьников! Просто невероятное удовольствие!', '45f91b3e-f664-40b3-98fe-c446fb62e54e', '47da02c5-adde-484b-940a-bf99c92ac927');


--
-- TOC entry 3272 (class 0 OID 16650)
-- Dependencies: 217
-- Data for Name: desired_games; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.desired_games VALUES ('5c076bc4-3d05-47da-a484-d8e34f55ed37', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.desired_games VALUES ('2f1989ba-60bd-48d9-a00e-ae1767a9cf0b', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33');
INSERT INTO public.desired_games VALUES ('d0e69258-4957-4876-929f-793a7615f955', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33');
INSERT INTO public.desired_games VALUES ('67396d02-cf3f-482a-8916-5270a8186ac1', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33');
INSERT INTO public.desired_games VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', 'c223ec03-65ad-454e-93e4-ee0eb84dac29');
INSERT INTO public.desired_games VALUES ('9188f09c-c309-4d0c-b5a4-965f0bc706c6', 'c223ec03-65ad-454e-93e4-ee0eb84dac29');
INSERT INTO public.desired_games VALUES ('60e2d3fa-9f1d-474f-ab88-bec2f3d95946', 'c223ec03-65ad-454e-93e4-ee0eb84dac29');


--
-- TOC entry 3289 (class 0 OID 75804)
-- Dependencies: 234
-- Data for Name: developer_status_purchases; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.developer_status_purchases VALUES (9, '621d722e-12ef-4325-a5bd-9d8c731b2bae');


--
-- TOC entry 3255 (class 0 OID 16412)
-- Dependencies: 200
-- Data for Name: developers; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.developers VALUES (7, 'Digital Extremes', '-', 0);
INSERT INTO public.developers VALUES (8, 'Valve', '-', 59.839999992400408);
INSERT INTO public.developers VALUES (5, 'BANDAI NAMCO Studios Inc.', '-', 44.858750000000001);
INSERT INTO public.developers VALUES (6, 'Crytivo', '-', 30.599999999999998);
INSERT INTO public.developers VALUES (4, 'Techland', '-', 17);
INSERT INTO public.developers VALUES (3, 'Копатель INC', 'Дайте денях!', 0);
INSERT INTO public.developers VALUES (9, 'Azaza Inc', NULL, 44.769500000000001);
INSERT INTO public.developers VALUES (2, 'Re-Logic', 'Re-Logic — частная компания, независимая студия-разработчик и издатель компьютерных игр. Основана в 2011 году, по данным на 2018 год команда насчитывает 12 сотрудников. «Re-logic» выпустила такие игры, как «Terraria», «Pixel Piracy» (издатель) и «Pixel Privateers»

Изначально в «Re-Logic» входили только основатель Эндрю Спинкс, который разработал и запрограммировал «Terraria», и Финн «Tiy» Брайс, сделавший графический дизайн к игре. Потом Брайс сосредоточился на собственном проекте «Starbound» и перестал являться сотрудником «Re-Logic».

С 2013 года студия работает над продолжением приключений в открытом мире «Terraria». Как стало известно, Эндрю Спинкс, создатель оригинальной игры, отметил, что разработчики активно готовят к выпуску «Terraria otherworld». По словам Спинкса, там появится широкий спектр новых возможностей, включая бесконечные миры, сюжет, и ветки навыков. Многое будет напоминать оригинальную игру, однако, по заверению главы студии, игроки получат ещё больше свободы, обновленную графику и анимацию, много новых вещей и мобов, структур и механизмов. В этом помогает также студия «Engine Software». Это будет не полноценный сиквел, а некое подобие спин-оффа к основному проекту.

Действие развернётся в одном из измерений «Террарии», где игрокам придется вступить в суровую схватку за «другой мир». Создатели обещают не трогать основные механики игры, так полюбившиеся фанатам — но в то же время добавить ролевые и стратегические компоненты, что придаст старой игре новое сияние. Студия особенно акцентирует тот факт, что новая игра не станет «Террарией—2». Кроме того, в ней, скорее всего, будет и кооперативная функциональность.

«Terraria: Otherworld» разрабатывается для PC и Mac, но Re-Logic склоняется и в сторону выпуска на Xbox One и PS4 в качестве инди-игры. В 2017 году вышла тактическая RPG «Pixel Privateers». Однако, сроки выпуска «Terraria: Otherworld» были отложены, так как «Re-Logic» отказалась от услуг студии «Engine Software» и продолжила работу с «Pipeworks Studios».

В 2018 году компания объявила, что прекращает разработку «Terraria: Otherworld». Процесс затянулся, хотя проект и перезапустили, но претворить идеи в жизнь разработчики так и не смогли. Оценив объём работы, который требовался для выпуска, они решили отказаться от дальнейшего воплощения. Студия больше не будет давать преждевременных анонсов и сообщать о своих планах. Действовать команда станет самостоятельно, не доверяя аутсорсингу и займётся обновлением основной «Terraria»', 39.950000000000003);
INSERT INTO public.developers VALUES (1, 'Mojang', 'Mojang AB — компания, занимающаяся разработкой видеоигр, принадлежащая Microsoft Studios. Наиболее известна как разработчик популярной игры Minecraft. Основана в мае 2009 года Маркусом Перссоном, Карлом Маннехом и Джейкобом Порсером. Офис компании находится в Стокгольме. В 2014 году была куплена корпорацией Microsoft за 2,5 миллиарда долларов.', 89.25);


--
-- TOC entry 3261 (class 0 OID 16506)
-- Dependencies: 206
-- Data for Name: devices; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.devices VALUES (0, 'PC');
INSERT INTO public.devices VALUES (1, 'Sony Playstation');
INSERT INTO public.devices VALUES (2, 'Sony Playstation 2');
INSERT INTO public.devices VALUES (3, 'Sony Playstation 3');
INSERT INTO public.devices VALUES (4, 'Sony Playstation 4');
INSERT INTO public.devices VALUES (5, 'XBOX');


--
-- TOC entry 3288 (class 0 OID 75755)
-- Dependencies: 233
-- Data for Name: game_addon_purchases; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.game_addon_purchases VALUES ('de2a6ff2-a6ab-48b7-973e-b4baffc84502', '221320b6-53cd-47a9-ac45-3abed27b716c');
INSERT INTO public.game_addon_purchases VALUES ('6065bd94-b8ac-493b-8202-d5bb0093ebe7', 'c7bd3e97-84db-40e8-8f7e-6501320fea49');
INSERT INTO public.game_addon_purchases VALUES ('6065bd94-b8ac-493b-8202-d5bb0093ebe7', 'b9cb45e5-3f01-43fc-9c46-1dc258c3ac0e');


--
-- TOC entry 3287 (class 0 OID 75725)
-- Dependencies: 232
-- Data for Name: game_purchases; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.game_purchases VALUES ('9188f09c-c309-4d0c-b5a4-965f0bc706c6', '9a099a8a-5f88-4663-8724-e227c05e25ed');
INSERT INTO public.game_purchases VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', 'c87eefb8-7482-4f30-9c98-78df9dd9d3f7');
INSERT INTO public.game_purchases VALUES ('8653c97d-3646-44cc-84a9-36f6a2cd722d', 'c7b12a19-0c32-4d1a-806a-3aca8afccd1b');
INSERT INTO public.game_purchases VALUES ('9188f09c-c309-4d0c-b5a4-965f0bc706c6', 'ccbf844d-499b-42b1-8d45-311d3b940f0e');
INSERT INTO public.game_purchases VALUES ('8653c97d-3646-44cc-84a9-36f6a2cd722d', '8dcc1717-22f2-42d3-8780-e7c2f6172139');
INSERT INTO public.game_purchases VALUES ('8a5ea125-4c9c-4a5f-bc59-ab0dd0239cf8', 'd2df58b1-83eb-489e-96bf-2c19c35bcc52');
INSERT INTO public.game_purchases VALUES ('8a5ea125-4c9c-4a5f-bc59-ab0dd0239cf8', 'a6e57a87-0b77-48c9-b510-5c2b166af182');
INSERT INTO public.game_purchases VALUES ('5c076bc4-3d05-47da-a484-d8e34f55ed37', '3b6e57a6-f04d-4e84-8950-829a3762a93a');
INSERT INTO public.game_purchases VALUES ('f7b84d7a-c513-4082-b42d-6c7d7290d6d5', 'bf202429-a852-438e-97e1-f4d298f31b2a');
INSERT INTO public.game_purchases VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', '4e8871e6-03c8-4b2e-ae6d-3ebbf50fb1ee');
INSERT INTO public.game_purchases VALUES ('96330fc0-3701-4e38-8f51-4b7b9e90f472', '5f747924-36ab-499e-b9a0-83ab42ef48f4');
INSERT INTO public.game_purchases VALUES ('9188f09c-c309-4d0c-b5a4-965f0bc706c6', '3c7da516-cea2-4de5-a33b-704765a43a1f');
INSERT INTO public.game_purchases VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', 'dc6ec65e-2fc9-485a-aabf-eda2b0ae3025');
INSERT INTO public.game_purchases VALUES ('b979dba2-7c0a-4f05-a307-56a7e40d74fb', 'f5b1c449-e628-43ec-bc36-5e8b359b7438');
INSERT INTO public.game_purchases VALUES ('47e297af-5a96-4133-a3d4-dd9ffd1808ff', 'b72d6ab7-8c5d-4c85-9fc2-5ab688410925');
INSERT INTO public.game_purchases VALUES ('8653c97d-3646-44cc-84a9-36f6a2cd722d', '7d91ef6b-3349-40dd-ac36-8bed7644963e');
INSERT INTO public.game_purchases VALUES ('5c076bc4-3d05-47da-a484-d8e34f55ed37', '50471e45-cac5-401d-adee-7b3e1f61c726');
INSERT INTO public.game_purchases VALUES ('a402402e-02a9-412c-ba2f-6576be0b4da8', '9f0f0a8e-0861-40b0-9b03-c5e9b53b2267');
INSERT INTO public.game_purchases VALUES ('694422f0-4aa0-442d-a642-d973c34698b6', 'feb98ac4-b7e9-4c44-804e-368ea5038275');
INSERT INTO public.game_purchases VALUES ('fd851935-7bb0-4d1d-a3d5-f032a6e2f5e7', '1a1ff31a-cb9c-4116-82ce-14238dd7e6ec');
INSERT INTO public.game_purchases VALUES ('2f1989ba-60bd-48d9-a00e-ae1767a9cf0b', '3bbcc118-f1b6-4ad8-a61f-af036f3e57aa');
INSERT INTO public.game_purchases VALUES ('8a5ea125-4c9c-4a5f-bc59-ab0dd0239cf8', '61d851f1-c89f-480c-ade4-4364d4a1cd69');
INSERT INTO public.game_purchases VALUES ('7ad954fa-610d-4419-8a89-cd05c2e1208d', 'bb246ef1-7a89-43ea-adb8-cd52fbbca686');
INSERT INTO public.game_purchases VALUES ('1c0febd3-87c9-4622-864f-70154b2bba0a', 'eeefb3f8-090b-4a07-970a-04878da3d621');
INSERT INTO public.game_purchases VALUES ('dff793e1-956d-4176-8177-4fcfee857823', 'a1bfe008-87c2-4139-9dd1-fc2556f5cd6a');
INSERT INTO public.game_purchases VALUES ('f7b84d7a-c513-4082-b42d-6c7d7290d6d5', 'd6cf3a31-1df0-4353-a007-18bdf5367bd6');
INSERT INTO public.game_purchases VALUES ('67396d02-cf3f-482a-8916-5270a8186ac1', 'c57bbb47-1175-466f-a876-ef0b60f81841');
INSERT INTO public.game_purchases VALUES ('93c35938-5316-424e-88cb-34b8e5e466c2', 'a9872590-c037-40cc-9348-670143602dd9');
INSERT INTO public.game_purchases VALUES ('1e78b4fb-511c-4b4b-ac67-f47ebac4e632', 'fa131efe-0a12-4dc4-b88c-5011b28bb2bc');
INSERT INTO public.game_purchases VALUES ('60e2d3fa-9f1d-474f-ab88-bec2f3d95946', '9da01542-edc9-40b1-8f27-a12eb8dec819');
INSERT INTO public.game_purchases VALUES ('96330fc0-3701-4e38-8f51-4b7b9e90f472', 'fe56e2b2-6add-42ff-8507-fd722e52b9ed');
INSERT INTO public.game_purchases VALUES ('71438f4f-aa62-43df-84aa-9e3d0a76c1c1', '8f3f2951-c824-4ce2-b3c3-c502828d4c6a');
INSERT INTO public.game_purchases VALUES ('b979dba2-7c0a-4f05-a307-56a7e40d74fb', '538d87d0-509e-4349-8667-dbb88d1bbad8');


--
-- TOC entry 3253 (class 0 OID 16401)
-- Dependencies: 198
-- Data for Name: games; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.games VALUES ('Minecraft', '2011-11-18', 30, 1, 'Minecraft  — компьютерная инди-игра в жанре песочницы с элементами симулятора выживания и открытым миром, разработанная шведским программистом Маркусом Перссоном, известным также как «Notch», и позже выпускаемая основанной Маркусом Перссоном компанией Mojang. Портированием и поддержкой версий игры для игровых консолей занималась британская компания 4J Studios. В 2014 году компания Mojang и права на Minecraft были приобретены американской компанией Microsoft.', 0, true, '77649835-1f83-485d-b70c-0bc64df1e09d');
INSERT INTO public.games VALUES ('Terraria', '2011-05-16', 15, 2, 'Terraria — компьютерная инди-игра в жанре приключенческой песочницы, разработанная американской студией Re-Logic. Была выпущена 16 мая 2011 года для компьютеров Microsoft Windows с распространением через систему цифровой дистрибуции Steam. После выхода Terraria была портирована на операционные системы Linux и macOS для персональных компьютеров; на Android, iOS и Windows Phone для мобильных устройств; на PlayStation 4, Xbox One, PlayStation Vita, Nintendo 3DS и Wii U для игровых приставок. Издателями для мобильных устройств выступила компания Codeglue, а для игровых приставок — 505 Games, Spike Chunsoft и Pipeworks. Студия Spike Chunsoft локализировала игру в Японии, в Германии — Headup Games.', 0, true, '9188f09c-c309-4d0c-b5a4-965f0bc706c6');
INSERT INTO public.games VALUES ('Копатель Онлайн', '2012-02-12', 0, 3, 'Копатель Онлайн — браузерная онлайн пародия на майнкрафт, которая есть во многих социальных сетях. Игра написана на движке Unity 3D.

Режимы
Строительство — основной режим, в котором можно строить разные постройки.

Командный бой — военный режим, в котором сражаются две команды.

Зомби — режим, в котором некоторые игроки играют за команду зомби а другие за команду людей.
Подробнее: http://www.wikireality.ru/wiki/%D0%9A%D0%BE%D0%BF%D0%B0%D1%82%D0%B5%D0%BB%D1%8C_%D0%BE%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD', 0, true, 'b979dba2-7c0a-4f05-a307-56a7e40d74fb');
INSERT INTO public.games VALUES ('Dying Light', '2015-01-26', 20, 4, 'Dying Light: сбываются мечты охотников на зомби! Исследуйте город в роли опытного паркурщика, добывайте припасы и создавайте оружие, которое поможет вам защититься от орды голодных мутантов, появившихся в результате неизвестной эпидемии. Как только заходит солнце, охотник превращается в жертву: мутантов становится больше, их силы растут и опаснейшие прыгуны покидают свои гнезда в поисках свежей человечинки. Вам понадобятся все ваши навыки и инструменты, чтобы дожить до рассвета.', 0, true, '71438f4f-aa62-43df-84aa-9e3d0a76c1c1');
INSERT INTO public.games VALUES ('The Universim', '2018-08-28', 18, 6, 'КАК ВЫ РАСПОРЯДИТЕСЬ СИЛОЙ?

Переходите непосредственно к управлению над Вашими собственными планетами; проведите цивилизацию сквозь века. Создайте непоколебимую империю в The Universim, игре нового класса в жанре Симулятора Бога, разработанной Crytivo.

Хотите участвовать в закрытой Альфе и Бета тестах The Universim?
Подписывайтесь на рассылку новостей, и мы дадим Вам знать, когда начнется закрытый бета-тест!

ХОТИТЕ СТАТЬ БОГОМ?

Ваше время пришло. Направляйте юную цивилизацию на пути бесконечных жизненных испытаний. Создав скромное поселение, смотрите как Ваш народ развивается и совершенствуется под Вашим чутким руководством! Влияйте на решения и наказывайте неблагодарных с помощью широкого выбора божественных способностей! Взаимодействуйте с объектами, насылайте ужасные катастрофы и отправляйте в полет на орбиту Ваших озадаченных подопечных. Это - Ваш мир, и ничто не остановит Вас на пути к бесконечному веселью.

Наша цель вернуть все те особенности, за которые Вы так полюбили классические игры жанра Симулятор Бога и приправить их свежими идеями, современным физическим движком и визуальным, графическим стилем, разработанными всего несколькими людьми нашей команды.

ИСТОРИЯ ОСЫБИ

Встречайте Наггетов - этот хрупкий и довольно-таки эксцентричный народ; они полагаются на Ваше руководство и наставничество в вопросах строительства и дальнейшего развития. Помогите им, и они вскоре напишут собственную историю. Каждый Наггет - уникальная личность с особым набором черт и характеристик. Подобно любым живым существам, Наггетам потребуются первичные природные ресурсы для выживания. Вода для питья, еда в пищу, и развлекательные мероприятия для повышения уровня счастья и качества жизни. В развлекательные мероприятия могут входить и весьма взрывоопасные затеи! Вас предупредили.

Со временем Вы заметите, что Ваши Наггеты ведут себя подобно настоящим, живым людям. У каждого из них есть свои мысли и потребности - они даже способны время от времени принимать важные решения. Мы бы хотели, чтобы Вы поняли: Вы взаимодействуете с живыми существами, а не пытаетесь управлять хаотичным движением Вашей муравьиной фермы.

ОРГАНИЧНЫЙ ГЕЙМПЛЕЙ

Планеты в Universim не просто состоят из кучи, красиво составленных объектов; все объекты связаны друг с другом и играют важную роль в экосистеме каждой планеты. Каждое срубленное дерево, каждый ресурс который добывается и каждое животное на которое ведётся охота, влияет на мир в котором живут Наггеты. Недостаточное количество животных и огромное загрязнение постепенно приведёт к Глобальному повышению температуры, в то время как постоянная охота и рыбалка приведёт к вымиранию различных видов. Ваша миссия руководить Наггетами, и тем как они собирают и используют ресурсы. Какую отметку вы оставите на экосистеме которая существовала в течении миллиона лет до вашего прибытия? Используете ли вы быстро все доступные ресурсы в убыток планеты или вы будете стратегически подходить к развитию вашей цивилизации?

These are living, breathing worlds where everything is interconnected. We aim to provide you with an unique experience unlike any of the god games you have played before. Every decision you or your civilization makes will have consequences.

NATURE AS YOU KNOW IT

In The Universim, nature is just as wonderful and unpredictable as ever. Every planet comes with a few surprises that are sure to challenge your civilization. From tornadoes that consume everything in their path, to thunderous earthquakes that threaten to split your civilization in two. If you treat nature poorly, it might just show you how brutal and unforgiving it can be. Each planet you encounter will have a unique underbelly. Some planets are tranquil and filled to the brim with resources, while others are barren and dangerous. Be careful out there!

Цикл дня и ночи может сыграть важную роль в развитии Вашей цивилизации. Вам стоит не только опасаться нападения диких животных, выходящих ночью на охоту, но и резкого снижения температуры воздуха. Днем лишь немногим безопаснее в этом жестоком мире. Вкупе со сменой сезонов, биомы планеты могут измениться до неузнаваемости, отчего Наггетам придется научиться выживать суровой зимой, даже если у них не окажется времени, чтобы подготовиться.', 0, true, '96330fc0-3701-4e38-8f51-4b7b9e90f472');
INSERT INTO public.games VALUES ('Warframe', '2013-03-25', 0, 7, 'Их называли Tenno. Воины клинка и огнестрельного оружия: мастера, облаченные в доспехи Warframe. Те, кто выжил в прошлой войне, обречены слоняться среди руин. Но теперь они вновь стали нужными.

Grineer со своими бесчисленными армиями распространяются по всей Солнечной системе. Призыв отдается эхом между звездами, созывая Tenno собраться в древнем месте. Они вызывают тебя.

Позволь, чтобы Lotus направила тебя. Она спасла тебя от криогенной камеры и дала тебе шанс выжить. Grineer найдет тебя; тебе нужно быть готовым. Lotus научит тебя путям Warframes и откроет тебе секреты их мощи.

Идем, Tenno, ты должен присоединиться к войне.', 0, true, '2ff45e1d-10b2-4425-bc53-c6f22f22bd7a');
INSERT INTO public.games VALUES ('Dota 2', '2013-07-09', 0, 8, 'Ежедневно миллионы игроков по всему миру вступают в битву от лица одного из более сотни героев Dota 2. Неважно, будет это десятый или тысячный час в игре — в ней всегда есть место чему-то новому. Регулярные обновления не дают стоять на месте игровому процессу, возможностям и героям, отчего Dota 2 поистине живёт собственной жизнью.

Одно поле боя, неиссякаемые возможности
Игра может похвастаться бесконечным разнообразием героев, способностей и предметов, благодаря чему каждый матч уникален. Любой герой может исполнять множество ролей, и для каждой нужды найдётся подходящий предмет. Полёт вашей мысли ничто не ограничивает — вы сами выбираете, какой стратегии следовать.

Все герои бесплатны
Равные соревновательные возможности — главная гордость игры. Чтобы все находились в одинаковом положении, её основа — в частности, обширный список героев — доступна каждому игроку. Если хотите, можете собирать предметы, видоизменяющие как героев, так и мир вокруг них, но всё необходимое для вашего первого матча уже есть в игре.

Зовите друзей и играйте вместе
Dota многогранна, и она не стоит на месте, но начать игру никогда не поздно.
Научитесь основам в матче против ботов. Опробуйте возможности героев. А затем вступайте в битву с игроками вашего уровня и поведения: система подбора матчей позаботится об этом.', 0, true, '17484e13-7314-4d55-acf6-9cf88c9d9ac5');
INSERT INTO public.games VALUES ('TEKKEN 7', '2017-06-02', 25.550000000000001, 5, 'Любовь, месть, гордость. У каждого свой повод сражаться. Наши ценности определяют наше поведение и делают людьми вне зависимости от наших сильных и слабых сторон. Нет дурных мотивов – лишь пути, которые мы выбираем сами.', 0.5, true, '60e2d3fa-9f1d-474f-ab88-bec2f3d95946');
INSERT INTO public.games VALUES ('Team Fortress 2', '2007-10-10', 0, 8, '«Самая веселая многопользовательская игра» — PC Gamer
Теперь БЕСПЛАТНА!
Никакого подвоха! Играйте, пока вам не надоест!

Самая высокооцененная бесплатная игра в истории!
Являясь одной из самых популярных многопользовательских экшен-игр всех времен и народов, Team Fortress 2 постоянно развивается вместе с непрекращающимися бесплатными обновлениями, вместе с которыми в игре появляются новые игровые режимы, карты, предметы и, самое главное, шляпы. Девять игровых классов откроют доступ ко множеству разнообразных тактик.

Новичок в TF? Не переживайте!
Каждый класс по-своему уникален и не даст заскучать даже самому искушенному игроку. Мы подготовили специальный курс обучения, а также игру с ботами, которые помогут вам отточить свои навыки, прежде чем сыграть в один из множества режимов игры, таких как захват разведданных, контрольные точки, сопровождение, царь горы и многих других.

Создайте свой собственный образ!
В игре есть огромное количество вооружения, шляп и всего остального. Предметы могут выпасть вам случайным образом, или же вы можете их сковать, купить или обменять. Вооружите ваш любимый класс так, как вам хочется. Не обязательно покупать предметы в магазине Манн Ко — их можно получить бесплатно во время игры.', 0, true, '1e78b4fb-511c-4b4b-ac67-f47ebac4e632');
INSERT INTO public.games VALUES ('HALF-LIFE', '1998-11-08', 6, 8, 'Боевик, приключения и удостоенная наград технология создания потрясающе реалистичного мира, в котором игрок должен думать, чтобы выживать — всё это обладатель звания «Игра года» от более чем 50 изданий, дебютная игра от Valve — Half-Life. Помимо всего прочего в игре присутствует увлекательный многопользовательский режим, который позволяет играть против друзей и врагов со всего мира.', 0, true, '8e8a39b3-b195-4938-9b4e-d517b1ebcefe');
INSERT INTO public.games VALUES ('Team Fortress Classic', '1999-04-01', 3, 8, 'Один из наиболее популярных онлайновых экшенов всех времен — Team Fortress Classic — предлагает десять классов персонажей: от Медика, до Шпиона и Подрывника, вовлеченных в уникальную по стилю командную войну. Каждый класс располагает уникальными оружием, снаряжением и способностями. Команды противостоят друг другу в онлайне в различных игровых режимах.', 0, true, '93c35938-5316-424e-88cb-34b8e5e466c2');
INSERT INTO public.games VALUES ('Counter-Strike', '2000-11-01', 6, 8, 'Сыграйте в лучший онлайновый экшен в мире. Примите участие в невероятно реалистичной войне с террористами в этой популярнейшей командной игре. Действуйте совместно с товарищами по команде для достижения стратегических целей. Уничтожайте опорные пункты врага. Освободите заложников. Ваши достижения влияют на успех вашей команды. Успех вашей команды влияет на ваши достижения.', 0, true, 'd0e69258-4957-4876-929f-793a7615f955');
INSERT INTO public.games VALUES ('Counter-Strike: Source', '2004-11-01', 6, 8, 'НОВАЯ ВЕРСИЯ СЕТЕВОГО ШУТЕРА НОМЕР ОДИН В МИРЕ 
Игра «Counter-Strike: Source» сочетает в себе триумфальную командную слаженность «Counter-Strike» с передовой технологией Source™. Обладающий соответствующей последним достижениям технической мысли графикой, полностью обновленным звуком и реальной физикой, «Counter-Strike: Source» просто должен занять почетное место в коллекции каждого поклонника жанра «экшен».', 0, true, '67396d02-cf3f-482a-8916-5270a8186ac1');
INSERT INTO public.games VALUES ('Half-Life 2', '2004-11-16', 6, 8, '1998 год. HALF-LIFE шокирует игровую индустрию сочетанием напряженного действия и непрерывного, затягивающего сюжета. Дебютная игра Valve завоевала свыше 50 наград «Игра года» на пути к получению титула «Лучшая игра для РС всех времен» от PC Gamer; она раскрутила франшизу, которая продала свыше восьми миллионов коробочных версий по всему миру.

СЕЙЧАС. Сохранив атмосферу тревоги, вызова и внутреннего напряжения и добавив новый реализм и интерактивность, Half-Life 2 открывает дверь в мир, в котором присутствие игрока влияет на все, что его окружает — от физической среды до поведения и даже эмоций как друзей, так и врагов.

Игрок вновь поднимает монтировку ученого-исследователя Гордона Фримена, который обнаруживает себя на наводненной чужаками Земле, ресурсы которой стремительно опустошаются, а население вырождается. Фримену навязана неизбежная роль спасителя человечества от того зла, которое он выпустил на свободу в Черной Мезе. И очень многие дорогие ему люди надеются на него.

Напряженный геймплей Half-Life 2 в режиме реального времени стал возможным исключительно благодаря Source®, — новому собственному высокотехнологичному игровому движку от Valve. Source характеризуется существенным прогрессом в следующих областях:

Персонажи: Передовая система лицевой анимации позволяет создавать игровых персонажей с невиданной прежде степенью проработки внешности. Используя 40 отдельных «мускулов» лица, персонажи-люди передают все разнообразие человеческих эмоций, демонстрируя адекватные и обоснованные ситуацией реакции на поведение героя.
Физика: Все объекты, начиная с пущенной по воде гальки и заканчивая двухтонными грузовиками, ведут себя естественно, полностью повинуясь законам физики с учетом массы, трения, силы тяжести и плавучести.
Графика: В Source используется система генерации изображений с поддержкой шейдеров, аналогичная той, с помощью которой студия Pixar создала мультфильмы Toy Story® и Monster''s, Inc.®. Она позволяет отрисовывать невиданные прежде в компьютерных играх, изумительные по красоте и реалистичности игровые окружения.
ИИ: Ни друзья, ни враги не бросаются в драку, сломя голову. Они в состоянии оценивать угрозы, выбирать оптимальный путь на пересеченной местности и собирать оружие из того, что есть под рукой.', 0, true, '1c0febd3-87c9-4622-864f-70154b2bba0a');
INSERT INTO public.games VALUES ('Portal', '2007-10-10', 6, 8, 'Portal™ — новая игра от Valve для одного игрока. Portal, действие которого происходит в загадочных лабораториях компании Aperture, был назван одной из самых новаторских игр современности и предлагает вниманию игрока множество часов непохожей ни на что головоломки.

Дизайн игры заставляет игрока изменить подход, способы взаимодействия и оценку возможностей в рамках заданного окружения, наподобие того, как гравипушка в Half-Life® 2 изменила способы обращения с объектами в разных ситуациях.

Игроки должны решить физические загадки и выйти из сложных ситуаций, открывая порталы для перемещения предметов и самих себя в пространстве.', 0, true, '7ad954fa-610d-4419-8a89-cd05c2e1208d');
INSERT INTO public.games VALUES ('Left 4 Dead 2', '2009-11-17', 6, 8, 'Настоящий зомби-апокалипсис, Left 4 Dead 2 (L4D2) — это высокооцененный сиквел к обладательнице многих наград, Left 4 Dead — лучшей кооперативной игре 2008 года.
В этом кооперативном хоррор-шутере с видом от первого лица вы и ваши друзья пройдут в пяти больших кампаниях сквозь города, болота и кладбища самого юга США, начиная с Саванны и заканчивая Новым Орлеаном.
Вам предстоит сыграть за одного из четырех новых выживших, используя для борьбы с врагами множество зубодробительных пушек, в том числе и обновленные эксземпляры из первой части игры. Кроме того, вы сможете вылить свою агрессию на зараженных с помощью ужасных оружий ближнего боя, например таких как бензопила, топор и смертельная сковородка.
Все эти игрушки вам придется применить против трех ужасающе страшных новых особых зараженных (или их уже будут применять против вас). Кроме того, вы сможете встретиться с пятью «нестандартными» обычными зомби, включая пугающего Грязевика.
На новый уровень затягивающий геймплей первой части игры переносит и обновленный «Режиссер». Теперь он может менять погоду, пути прохода, не говоря уже о численности врагов, эффектах, звуках и прочих вещах, которые будут соответствовать вашему уровню игры. Каждый раз L4D2 будет по-новому «испытывать» вас, изменяя к вам подход и подстраиваясь под стиль вашей игры.
Новый стандарт для игр с кооперативным прохождением от создателей Half-Life, Portal, Team Fortress и Counter-Strike.
Более 20 новых оружий и предметов, в том числе 10 новых оружий ближнего боя: топор, бензопила, сковорода, бейсбольная бита, которыми вы сможете выбить все мозги из чертовых зомби!
Новые выжившие. Новая история. Новые диалоги. 
Пять больших кампаний, которые доступны для прохождения в режимах кооперативной игры, «Сражение» и «Выживание».
Абсолютно новый многопользовательский режим.
Нестандартные обычные зомби. В каждой из пяти новых кампаний будет как минимум один вид «нестандартных обычных» зомби, которые встретятся вам только в этой кампании. 
Обновленный «Режиссер»: продвинутая технология, названная «Режиссером» превращает L4D в уникальную игру, в которой от ваших действий будет зависеть, какие эффекты, музыка и количество врагов выльются на вас в процессе игры. В L4D 2 представлен обновленный «Режиссер», который теперь может изменять пути прохождения локаций, объекты, погоду и освещение в различное время суток.
Статистика, таблица лучших и достижения.', 0, true, '8a5ea125-4c9c-4a5f-bc59-ab0dd0239cf8');
INSERT INTO public.games VALUES ('Portal 2', '2011-04-19', 6, 8, 'В Portal 2 вы откроете для себя инновационный геймплей, сюжет и музыку, которая помогла оригиналу заработать более 70 наград в игровой индустрии, а также создала целый культ имени самой себя.

На блюде с одиночной игрой Portal 2 вы сможете поживиться несколькими новыми персонажами, разнообразными неожиданными головоломками и еще большим количеством тестовых комнат. Игроки смогут познакомиться с неизвестными им частями лаборатории Aperture Science и снова объединятся с ГЛаДОС — порою издевательски злобной компьютером-компаньоншей, которая помогала главному герою пройти все испытания в первой части игры.

Играя в кооперативном режиме, игроки откроют для себя абсолютно новую, независимую от оригинальной сюжетную линию с новыми тестовыми комнатами и двумя персонажами. Здесь каждому из вас придется проявить все то, что вы знаете о порталах. Чтобы добиться успеха, вы будете обязаны не просто играть вместе, но и думать сообща.

Особенности игры
Протяженная кампания для одиночной игры: захватывающий сюжет и передовой геймплей заставят вас не отрываться от экрана на протяжении нескольких часов.
Полноценный кооперативный режим на двух человек: многопользовательская игра со своей сюжетной линией, персонажами и геймплеем.
Улучшенная физика: всё становится еще интереснее, необычнее и запутаннее, но никак не сложнее!
Оригинальная музыка.
Громадный сиквел: первый Portal получил звание «Игра 2007 года» от более чем 30 ведущих игровых изданий. 
Инструменты для редактирования: в Portal 2 включены инструменты для разработчиков.', 0, true, 'f7b84d7a-c513-4082-b42d-6c7d7290d6d5');
INSERT INTO public.games VALUES ('Counter-Strike: Global Offensive', '2012-08-21', 8, 8, 'Counter-Strike: Global Offensive (CS: GO) возродит тот ураганный командный игровой процесс, впервые представленный еще 12 лет назад.
CS: GO включает в себя новые карты, персонажей и оружие, а также улучшенную версию классической составляющей CS (de_dust и т.п.). Кроме того, CS: GO содержит новые игровые режимы, систему организации матчей, списки лучших игроков и многое другое.
«Counter-Strike была сюрпризом для игровой индустрии, когда не особо удачный мод стал одним из самых популярных шутеров в мире сразу же после его релиза в Августе 1999 года, — говорит Даг Ломбарди из Valve, — за прошедшие 12 лет, она все еще одна из самых популярных в мире игр, часто появляется на игровых соревнованиях и продана в количестве более 25 миллионов копий по всему миру. CS: GO обещает возродить знаменитый игровой процесс Counter-Strike и предложить его игрокам не только на ПК, но и на консолях следующего поколения и компьютерах Mac».', 0, true, '2f1989ba-60bd-48d9-a00e-ae1767a9cf0b');
INSERT INTO public.games VALUES ('Cobalt', '2016-02-02', 15, 1, 'Забудьте все, что вы узнали о бою. Механик slo-mo Cobalt позволяет выполнять действия, которые другие игры не могут понять. Играйте в историю и находите ответы на загадочные вопросы, в том числе: Что случилось с людьми? Почему я езжу на космическом хомяке? Как моя киборгская голова так хороша в том, чтобы отклонять пули? Мультиплеер является менее загадочным, хотя и в равной степени приятным делом: сражайтесь с друзьями и врагами в местном или онлайн-мультиплеере, изучайте тонкости более 80 карт и 67 видов оружия и доминируйте над лидерами.

Наслаждайтесь 6 многопользовательскими режимами на более чем 80 картах. Играйте на месте или в Интернете.
Обладают более чем 37 дальнобойным оружием, 33 оружием ближнего боя, 6 щитами рук и т. Д. ...
Используйте подписи кобальта - боевой бросок - чтобы отклонить снаряды или выровнять сладкие выстрелы в голову.
Воспользуйтесь нашим автоматическим механизмом экстремального слёома, чтобы снять маневры больного, такие как удары ракеты, отклонения пулей или последние секунды
Настройте оружие и броню на свой личный вкус.
Играйте в историю самостоятельно или в кооперативе. Укротимые осы! Примите участие в ненужных танцевальных мини-играх. Подружитесь с птицами, потом грустите, когда они взорвутся в пух перьев
Шесть игровых режимов
Режим выживания: сражайтесь против волн врагов, модернизируя оборудование между раундами.
Боевые и скоростные задачи: скорость испытания, маневренность и боевые навыки в сложных задачах. Возьмите свое место на мировых лидеров.
Deathmatch: Идите голова в голову в откровенных схватках или командных битвах.
Team Strike: Нет респаунов. Несколько раундов! Обновление оборудования! Самый оригинальный режим Кобальта.
Plug Slam: самый популярный вид спорта в мире кобальта. Забейте штепсель в цель, чтобы выиграть. Не умирай!
Режим истории: Откройте для себя секреты удаленной колонии в одиночку или с другом в местном кооперативе. Включает в себя головоломки, боссы и прирученные питомцы.', 0, true, 'fd851935-7bb0-4d1d-a3d5-f032a6e2f5e7');
INSERT INTO public.games VALUES ('Pixel Piracy', '2015-04-23', 7, 2, 'Живите жизнью пиратского капитана! Набирайте экипаж соленых пиратов, экипируйте и настраивайте свой корабль, а затем отправляйтесь в открытые моря в поисках сокровищ и позора. Используя сочетание агрессии, диверсии и торговли, вы станете следующим легендарным королем пиратов и самым опасным пиратским экипажем во всей Пирасии?
Pixel Piracy, двумерный пиратский симулятор, возвращается с основополагающим восстановлением, которое приносит игру в полную силу! От предметов до статистики, до островов и добычи, до совершенно нового Sailor Mode и Tutorial - вся игра была пересмотрена в течение последних шести месяцев, чтобы предоставить вам самый полированный опыт, который мы создали на сегодняшний день. С помощью наших партнеров в Re-Logic (Terraria) мы с гордостью представляем вам обновление, в котором Pixel Piracy займет место, достойное его названия.

Адаптируйте свой стиль игры, используя различные настройки сложности - есть что-то для всех, от случайных и опытных игроков с рогейли. Если вы являетесь игроком Pixel Piracy, мы хотели бы пригласить вас снова попробовать игру, так как многое изменилось, и мы даже не знаем, с чего начать!


ТЕКУЩИЕ ОСОБЕННОСТИ

Текущие функции:

-------------------------------------------------- -
** PIXEL PIRACY ПОЛНОЕ ОБНОВЛЕНИЕ **
Сотни человеко-часов пошли в свободную экспансию, которая включает в себя широкомасштабные изменения во всех аспектах игрового процесса. Это результат шести месяцев работы в секретной руке с Re-Logic. Исходные изменения:

Восстановленный A.I: переделанный с нуля, внутренний A.I игры был построен с нуля, чтобы обеспечить более плавный игровой процесс.

Оптимизация кода: внутренний код был пересмотрен, чтобы ускорить его работу на более старых компьютерах. Ожидайте, что BIG повысит качество.

Пересмотренные предметы / Stats / Loot / Enemies / Islands: Мы пересмотрели каждую из этих вещей, кропотливо настраивая, балансируя и полируя, чтобы обеспечить окончательный Pirate Sim.

Несколько языков: игра теперь доступна на английском, испанском, финском, итальянском, португальском и немецком языках.

Множество уровней сложности: ушли экстремальные уровни сложности прошлого, теперь вы можете настроить игру на свой игровой стиль, от Sailor (casual) до легендарного капитана (Hardcore Roguelike Expert), есть что-то для всех.

Full Fledged Tutorial: один из самых востребованных функций, учебник покажет вам веревки и поможет вам начать жизнь на Piracia!


Песочница открытого мира Пиратский симулятор.
-------------------------------------------------
Процессуально созданный мир, который изменяет каждую новую игру, в которую вы играете. Хотя не Roguelike в самом строгом смысле, он наносит удар одному.
Огромная карта мира, полная опасности, добычи и людей, на которых можно охотиться.
Всесторонняя система добычи, модернизируемое оружие и доспехи, специальное и секретное добычу для палубы ваших моряков.
Попугаи, домашние животные и грабежи!
Для каждого прогона потребуется около 20 часов, чтобы пройти (с по крайней мере 4 проходами, необходимыми для просмотра всей игры)', 0, true, '694422f0-4aa0-442d-a642-d973c34698b6');
INSERT INTO public.games VALUES ('Pixel Privateers', '2017-02-21', 10, 2, 'Pixel Privateers - это тактическая RPG на основе отряда «Loot ''Em Up», которая отправит вашу команду наемников через таинственную червоточину на поиски, чтобы собрать технологии для вашего работодателя. В суете судьбы ваше путешествие становится односторонним билетом - с целым плеядой миров, чтобы исследовать, столкновения с фракциями и эпическое снаряжение для сбора. Вы вернетесь домой, сделаете свой след в этой новой вселенной или станете еще одной жертвой многих опасностей космоса? В конечном счете, как ваша история разыгрывается, зависит от вас!

Ориентируясь на настраиваемый пользователем опыт и надежный мультиплеер в рамках глубокой и привлекательной RPG для космических исследований, Pixel Privateers стремится предоставить действительно доступный опыт, который понравится геймерам всех типов и уровням навыков.
ДЕТАЛИ GAMEPLAY
Огромная Вселенная, чтобы исследовать
Перемещайте свой корабль через вселенную и приземляйтесь на любую планету, которую вы выберете! Однако будьте осторожны, потому что многие опасения ждут - от воюющих фракций до кровожадных инопланетян и больше!
Истинный тактический, отряд на основе битвы
Контролируйте свой отряд индивидуально в тактическом режиме - там, где вы делаете приказы и выполняете их, или контролируете свою команду как единое целое, направляя их сразу!
Доступный игровой процесс
Множество настроек сложности позволит вам наслаждаться игрой более случайным образом - или бросить вызов себе в Hardcore Mode, где смерть довольно постоянна!
Сюжетная линия и фракции
Изучите историю различных фракций и их место во Вселенной и сами входите в эту интригу. Где ваши лояльности? Какую часть вы будете играть? Посмотрите, как разворачивается история!
Глубокие навыки и технические деревья
Продвигайте свои знания и завоевывайте: приобретайте удивительные новые навыки, способности и технологии, исследуя чужие артефакты. Обучать и продвигать отдельных членов экипажа, улучшая их статистику и собирая лучшее снаряжение!
Интерактивный корабль
Устали от всего, что приключений? Проведите некоторое время, наращивая и исследуя свой корабль! Может быть, даже пообщаться в своем собственном баре - в комплекте с группой, чтобы развлечь вас!
Эпический лут!
Множество потрясающего снаряжения, чтобы сделать вас электростанцией, там для взятия! Разбивайте предметы, которые вам не нужны, в Материи, которые можно потратить различными способами, чтобы улучшить вашу команду.
Сообщение о запуске
Мы планируем довести бесплатные расширения контента до Pixel Privateers после запуска. Охватывая не только наши идеи, но и предложения Сообщества, мы с нетерпением ждем возможности активно поддерживать Частных лиц в течение долгого времени.', 0, true, 'a402402e-02a9-412c-ba2f-6576be0b4da8');
INSERT INTO public.games VALUES ('Sword Art Online: Hollow Realization', '2016-10-27', 40, 5, 'Вместе с игрой вы получите сезонный абонемент и включённые в него подарки (3 костюма, включая свадебное платье).

В 2026 году выходит новая игра в жанре VRMMORPG – Sword Art: Origin. Это определенно не та игра, из которой Кирито когда-то вырвался…
НОВЫЙ СЮЖЕТ, созданный под руководством Рэки Кавахары, автора Sword Art Online.
ОГРОМНЫЙ МИР, полный приключений.', 0, true, '47e297af-5a96-4133-a3d4-dd9ffd1808ff');
INSERT INTO public.games VALUES ('Super test game', '2018-12-26', 9.9000000000000004, 9, 'Эта игра вас зацепит!', 0, true, '8653c97d-3646-44cc-84a9-36f6a2cd722d');
INSERT INTO public.games VALUES ('Left 4 Dead', '2008-11-17', 6, 8, 'Новинка от Valve — создателей Counter-Strike, Half-Life и многих других игр — Left 4 Dead — это новая игра для ПК и Xbox 360, представляющая собой эпическую битву четверых «Выживших» с ордами бесчисленных зомби и ужасных мутантов «Зомби-боссов».
Действие разворачивается сразу после давно ожидаемого апокалипсиса, превратившего всех в зомби. Четверо выживших героев будут бороться за жизнь, оказываясь то в неизвестном городе, то где-то далеко за его пределами, при этом окружающая их обстановка будет постоянно меняться, как сцены из кинофильма. В каждой сцене предлагаемого создателями «кинофильма» четырем героям предстоит выполнить ту или иную задачу; играть может как один, так и четыре игрока, для каждого сюжета им предлагается пять карт.
Новая динамическая система, названная разработчиками «AI Director», изменяет ход игры в зависимости от того, как ведут себя игроки, подстраивая уровень сложности. Как в голливудских фильмах, отовсюду появляются все новые монстры, меняются звук и окружающая действительность — все зависит от того, как действует играющая команда.
Выпуск Left 4 Dead для ПК и Xbox 360 назначен на ноябрь этого года, в данной версии будут доступны новые режимы игры, в которых могут принять участие сразу несколько игроков.
Захватывающая командная игра от создателей Counter-Strike и Half-Life
Улучшенные технологии подарят много впечатляющих моментов, встречу с дружелюбными и не очень монстрами, а также гарантируют получение удовольствия от игры как в одиночку, так и с несколькими участниками
20 новых карт. 10 новых видов оружия. Четыре «кинофильма» с закрученным сюжетом
Возможность устраивать поединки, составлять различные статистики и рейтинги, а также система наград — все это делает игру в команде еще интереснее
Режим с комментариями разработчиков позволит участникам попасть «за кулисы» игры', 0.100000001, true, '5c076bc4-3d05-47da-a484-d8e34f55ed37');
INSERT INTO public.games VALUES ('Alien Swarm', '2010-07-19', 0, 8, 'Alien Swarm — это игра и набор для разработки модификаций, созданные группой талантливых дизайнеров из Valve, нанятых из сообщества создателей модификаций.
Вместе со своими напарниками по отряду, применяя различные тактики вам предстоит сразиться против миллионов жуков. И все это — абсолютно бесплатно. Играйте с друзьями, сформируйте свой отряд из четырех уникальных классов — бойцов Межзвездных Вооруженных Сил. Планируйте тактику своих атак, используя стандартное и разблокируемое оружие против чертовски стойких инопланетных тварей. Пробейтесь через разросшуюся, внеземную колонию, уничтожая инопланетных захватчиков как на поверхности замерзшей планеты, так и в заполненной лавой горной шахтой.
Вместе с игрой вы получаете обновления для движка Source и набор для разработки своих модификаций к игре — SDK. В Alien Swarm к движку Source добавлен вид от 3-го лица, размытие изображения, улучшенные тени и множество разнообразных игровых дополнений.
Тактический кооперативных экшен, рассчитанный на 4 игроков
Полностью открытый код игры и инструменты для создания модификаций
Возможность получения новых оружий, повышая уровень своего персонажа
Более 40 оружий и инструментов, и это не считая кучи вариантов экипировки своего персонажа
4 уникальных класса и 8 не похожих персонажей 
Система автоматического поиска игр, Steam Cloud, статистика Steam
64 достижения
Простой инструмент для создания карт
Создано на движке Source с применением Steam', 0, true, 'dff793e1-956d-4176-8177-4fcfee857823');


--
-- TOC entry 3259 (class 0 OID 16474)
-- Dependencies: 204
-- Data for Name: games_addons; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.games_addons VALUES ('Super test addon', 4.9900000000000002, 'Это дополнение вам понравится!', 'de2a6ff2-a6ab-48b7-973e-b4baffc84502');
INSERT INTO public.games_addons VALUES ('Super test addon 2', 8.9900000000000002, 'Новое дополнение, которое точно вам зайдёт!', '6065bd94-b8ac-493b-8202-d5bb0093ebe7');


--
-- TOC entry 3271 (class 0 OID 16624)
-- Dependencies: 216
-- Data for Name: games_addons_list; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.games_addons_list VALUES ('8653c97d-3646-44cc-84a9-36f6a2cd722d', 'de2a6ff2-a6ab-48b7-973e-b4baffc84502');
INSERT INTO public.games_addons_list VALUES ('8653c97d-3646-44cc-84a9-36f6a2cd722d', '6065bd94-b8ac-493b-8202-d5bb0093ebe7');


--
-- TOC entry 3276 (class 0 OID 58699)
-- Dependencies: 221
-- Data for Name: games_commentaries; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.games_commentaries VALUES ('9188f09c-c309-4d0c-b5a4-965f0bc706c6', '90fbd521-edea-4918-8467-dc4f7c4c30f5');
INSERT INTO public.games_commentaries VALUES ('17484e13-7314-4d55-acf6-9cf88c9d9ac5', '9f2ab8fd-356d-4327-ba01-587c56876dd7');
INSERT INTO public.games_commentaries VALUES ('17484e13-7314-4d55-acf6-9cf88c9d9ac5', '95906999-3b7c-45fc-b976-f27cc5b915b5');
INSERT INTO public.games_commentaries VALUES ('9188f09c-c309-4d0c-b5a4-965f0bc706c6', 'a6b46a6f-ceba-4c4a-905d-3b6ba247d814');
INSERT INTO public.games_commentaries VALUES ('17484e13-7314-4d55-acf6-9cf88c9d9ac5', 'e5a6a1c0-672a-4882-8400-9ed75a8f4725');
INSERT INTO public.games_commentaries VALUES ('17484e13-7314-4d55-acf6-9cf88c9d9ac5', 'a57a252c-9a9a-42b8-84e0-2f6ceaa40338');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', 'dc79ad6b-9273-481a-9277-3554f74868ce');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', '98539141-a056-43fe-b60e-f3715361d989');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', '259d5975-ffab-41ee-b23f-b4fe559eb5f8');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', '563f5c88-4c87-47d7-958e-e74641e2e8b7');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', 'dbe46e03-74d4-41b9-9919-db05ec7f7fec');
INSERT INTO public.games_commentaries VALUES ('f7b84d7a-c513-4082-b42d-6c7d7290d6d5', 'b9eb3b84-11b6-45e8-84a6-b15f83065cd3');
INSERT INTO public.games_commentaries VALUES ('5c076bc4-3d05-47da-a484-d8e34f55ed37', 'fdc5cfff-c134-4ae6-b881-fecf183f6877');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', '67b74dab-6480-4cb7-8c65-768777c02c97');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', 'e5f0b8c0-25a6-427d-b35f-40476d2bf7e5');
INSERT INTO public.games_commentaries VALUES ('77649835-1f83-485d-b70c-0bc64df1e09d', 'e00c6832-55fc-4f45-965e-e565c53fb6ce');
INSERT INTO public.games_commentaries VALUES ('9188f09c-c309-4d0c-b5a4-965f0bc706c6', 'ee0f3e64-2670-4ed1-96f8-7b5ffd63e671');
INSERT INTO public.games_commentaries VALUES ('b979dba2-7c0a-4f05-a307-56a7e40d74fb', '45f91b3e-f664-40b3-98fe-c446fb62e54e');


--
-- TOC entry 3257 (class 0 OID 16432)
-- Dependencies: 202
-- Data for Name: games_genres; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.games_genres VALUES (0, 'RPG');


--
-- TOC entry 3258 (class 0 OID 16443)
-- Dependencies: 203
-- Data for Name: games_genres_list; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3274 (class 0 OID 16702)
-- Dependencies: 219
-- Data for Name: games_images; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3266 (class 0 OID 16565)
-- Dependencies: 211
-- Data for Name: games_news; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3277 (class 0 OID 58713)
-- Dependencies: 222
-- Data for Name: games_news_commentaries; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3281 (class 0 OID 75335)
-- Dependencies: 226
-- Data for Name: games_ratings; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3292 (class 0 OID 92288)
-- Dependencies: 237
-- Data for Name: games_statistics; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.games_statistics VALUES ('8653c97d-3646-44cc-84a9-36f6a2cd722d', 2018, 0, 0, 0, 0, 0, 0);


--
-- TOC entry 3262 (class 0 OID 16512)
-- Dependencies: 207
-- Data for Name: games_supported_devices; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3269 (class 0 OID 16592)
-- Dependencies: 214
-- Data for Name: games_tags; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3270 (class 0 OID 16598)
-- Dependencies: 215
-- Data for Name: games_tags_list; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3267 (class 0 OID 16581)
-- Dependencies: 212
-- Data for Name: global_news; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3278 (class 0 OID 58726)
-- Dependencies: 223
-- Data for Name: global_news_commentaries; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3279 (class 0 OID 58761)
-- Dependencies: 224
-- Data for Name: news; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3273 (class 0 OID 16665)
-- Dependencies: 218
-- Data for Name: purchases; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.purchases VALUES ('2018-12-25 23:01:56.009309+03', 'Buying a game for personal use.', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '9a099a8a-5f88-4663-8724-e227c05e25ed', 0);
INSERT INTO public.purchases VALUES ('2018-12-26 01:36:06.772916+03', 'Buying a game for personal use.', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 'c87eefb8-7482-4f30-9c98-78df9dd9d3f7', 0);
INSERT INTO public.purchases VALUES ('2018-12-26 02:42:13.517802+03', 'Buying a game addon for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '221320b6-53cd-47a9-ac45-3abed27b716c', 0);
INSERT INTO public.purchases VALUES ('2018-12-26 04:50:01.504788+03', 'Buying a game addon for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', 'c7bd3e97-84db-40e8-8f7e-6501320fea49', 8.9900000000000002);
INSERT INTO public.purchases VALUES ('2018-12-26 04:50:57.650006+03', 'Buying a game addon for personal use.', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 'b9cb45e5-3f01-43fc-9c46-1dc258c3ac0e', 8.9900000000000002);
INSERT INTO public.purchases VALUES ('2018-12-26 04:51:51.088074+03', 'Buying a game for personal use.', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '8dcc1717-22f2-42d3-8780-e7c2f6172139', 9.9000000000000004);
INSERT INTO public.purchases VALUES ('2018-12-24 16:00:08.362536+03', 'Buying Developer Status', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '621d722e-12ef-4325-a5bd-9d8c731b2bae', 0);
INSERT INTO public.purchases VALUES ('2018-12-26 02:16:26.709567+03', 'Buying a game for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', 'c7b12a19-0c32-4d1a-806a-3aca8afccd1b', 0);
INSERT INTO public.purchases VALUES ('2018-12-26 04:00:49.667789+03', 'Buying a game for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', 'ccbf844d-499b-42b1-8d45-311d3b940f0e', 9);
INSERT INTO public.purchases VALUES ('2018-12-26 05:46:58.072811+03', 'Buying a game for personal use.', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 'd2df58b1-83eb-489e-96bf-2c19c35bcc52', 6);
INSERT INTO public.purchases VALUES ('2018-12-26 05:48:25.006057+03', 'Buying a game for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', 'a6e57a87-0b77-48c9-b510-5c2b166af182', 6);
INSERT INTO public.purchases VALUES ('2018-12-26 05:48:36.242361+03', 'Buying a game for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '3b6e57a6-f04d-4e84-8950-829a3762a93a', 6);
INSERT INTO public.purchases VALUES ('2018-12-26 06:13:17.451324+03', 'Buying a game for personal use.', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 'bf202429-a852-438e-97e1-f4d298f31b2a', 6);
INSERT INTO public.purchases VALUES ('2018-12-26 06:39:19.406845+03', 'Buying a game for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '4e8871e6-03c8-4b2e-ae6d-3ebbf50fb1ee', 30);
INSERT INTO public.purchases VALUES ('2018-12-26 06:43:47.42234+03', 'Buying a game for personal use.', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '5f747924-36ab-499e-b9a0-83ab42ef48f4', 18);
INSERT INTO public.purchases VALUES ('2019-01-01 23:44:36.806194+03', 'Buying a game Terraria for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '3c7da516-cea2-4de5-a33b-704765a43a1f', 15);
INSERT INTO public.purchases VALUES ('2019-01-01 23:45:03.041112+03', 'Buying a game Minecraft for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'dc6ec65e-2fc9-485a-aabf-eda2b0ae3025', 30);
INSERT INTO public.purchases VALUES ('2019-01-01 23:47:52.444582+03', 'Buying a game Копатель Онлайн for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'f5b1c449-e628-43ec-bc36-5e8b359b7438', 0);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:06.212124+03', 'Buying a game Sword Art Online: Hollow Realization for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'b72d6ab7-8c5d-4c85-9fc2-5ab688410925', 40);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:09.935493+03', 'Buying a game Super test game for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '7d91ef6b-3349-40dd-ac36-8bed7644963e', 9.9000000000000004);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:11.884489+03', 'Buying a game Left 4 Dead for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '50471e45-cac5-401d-adee-7b3e1f61c726', 5.3999999910593033);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:14.279156+03', 'Buying a game Pixel Privateers for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '9f0f0a8e-0861-40b0-9b03-c5e9b53b2267', 10);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:17.028279+03', 'Buying a game Pixel Piracy for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'feb98ac4-b7e9-4c44-804e-368ea5038275', 7);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:18.801139+03', 'Buying a game Cobalt for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '1a1ff31a-cb9c-4116-82ce-14238dd7e6ec', 15);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:20.92153+03', 'Buying a game Counter-Strike: Global Offensive for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '3bbcc118-f1b6-4ad8-a61f-af036f3e57aa', 8);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:22.602495+03', 'Buying a game Left 4 Dead 2 for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '61d851f1-c89f-480c-ade4-4364d4a1cd69', 6);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:23.944038+03', 'Buying a game Portal for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'bb246ef1-7a89-43ea-adb8-cd52fbbca686', 6);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:25.752307+03', 'Buying a game Half-Life 2 for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'eeefb3f8-090b-4a07-970a-04878da3d621', 6);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:28.240149+03', 'Buying a game Alien Swarm for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'a1bfe008-87c2-4139-9dd1-fc2556f5cd6a', 0);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:35.302172+03', 'Buying a game Portal 2 for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'd6cf3a31-1df0-4353-a007-18bdf5367bd6', 6);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:40.39522+03', 'Buying a game Counter-Strike: Source for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'c57bbb47-1175-466f-a876-ef0b60f81841', 6);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:43.383497+03', 'Buying a game Team Fortress Classic for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'a9872590-c037-40cc-9348-670143602dd9', 3);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:47.680427+03', 'Buying a game Team Fortress 2 for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'fa131efe-0a12-4dc4-b88c-5011b28bb2bc', 0);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:49.119472+03', 'Buying a game TEKKEN 7 for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '9da01542-edc9-40b1-8f27-a12eb8dec819', 12.775);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:54.969237+03', 'Buying a game The Universim for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', 'fe56e2b2-6add-42ff-8507-fd722e52b9ed', 18);
INSERT INTO public.purchases VALUES ('2019-01-01 23:48:56.625218+03', 'Buying a game Dying Light for personal use.', '47da02c5-adde-484b-940a-bf99c92ac927', '8f3f2951-c824-4ce2-b3c3-c502828d4c6a', 20);
INSERT INTO public.purchases VALUES ('2019-01-02 02:19:19.033353+03', 'Buying a game Копатель Онлайн for personal use.', 'c223ec03-65ad-454e-93e4-ee0eb84dac29', '538d87d0-509e-4349-8667-dbb88d1bbad8', 0);


--
-- TOC entry 3265 (class 0 OID 16547)
-- Dependencies: 210
-- Data for Name: roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.roles VALUES (0, 'user');
INSERT INTO public.roles VALUES (1, 'moderator');
INSERT INTO public.roles VALUES (2, 'admin');


--
-- TOC entry 3284 (class 0 OID 75611)
-- Dependencies: 229
-- Data for Name: statuses; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.statuses VALUES (0, 'Новый пользователь');
INSERT INTO public.statuses VALUES (1, 'Начинающий геймер');
INSERT INTO public.statuses VALUES (128, 'Тот, кто повидал 128 игр!');
INSERT INTO public.statuses VALUES (4, 'Продвинутый геймер');
INSERT INTO public.statuses VALUES (8, 'Опытный геймер');
INSERT INTO public.statuses VALUES (16, 'Заколённый геймер');
INSERT INTO public.statuses VALUES (32, 'Элитный геймер');
INSERT INTO public.statuses VALUES (64, 'Игровой ветеран');


--
-- TOC entry 3291 (class 0 OID 75843)
-- Dependencies: 236
-- Data for Name: user_game_addons; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_game_addons VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', 'de2a6ff2-a6ab-48b7-973e-b4baffc84502');
INSERT INTO public.user_game_addons VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '6065bd94-b8ac-493b-8202-d5bb0093ebe7');
INSERT INTO public.user_game_addons VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '6065bd94-b8ac-493b-8202-d5bb0093ebe7');


--
-- TOC entry 3290 (class 0 OID 75828)
-- Dependencies: 235
-- Data for Name: user_games; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_games VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '9188f09c-c309-4d0c-b5a4-965f0bc706c6');
INSERT INTO public.user_games VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '77649835-1f83-485d-b70c-0bc64df1e09d');
INSERT INTO public.user_games VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '8653c97d-3646-44cc-84a9-36f6a2cd722d');
INSERT INTO public.user_games VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '9188f09c-c309-4d0c-b5a4-965f0bc706c6');
INSERT INTO public.user_games VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '8653c97d-3646-44cc-84a9-36f6a2cd722d');
INSERT INTO public.user_games VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', '8a5ea125-4c9c-4a5f-bc59-ab0dd0239cf8');
INSERT INTO public.user_games VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '8a5ea125-4c9c-4a5f-bc59-ab0dd0239cf8');
INSERT INTO public.user_games VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '5c076bc4-3d05-47da-a484-d8e34f55ed37');
INSERT INTO public.user_games VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 'f7b84d7a-c513-4082-b42d-6c7d7290d6d5');
INSERT INTO public.user_games VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '77649835-1f83-485d-b70c-0bc64df1e09d');
INSERT INTO public.user_games VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', '96330fc0-3701-4e38-8f51-4b7b9e90f472');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '9188f09c-c309-4d0c-b5a4-965f0bc706c6');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '77649835-1f83-485d-b70c-0bc64df1e09d');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', 'b979dba2-7c0a-4f05-a307-56a7e40d74fb');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '47e297af-5a96-4133-a3d4-dd9ffd1808ff');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '8653c97d-3646-44cc-84a9-36f6a2cd722d');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '5c076bc4-3d05-47da-a484-d8e34f55ed37');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', 'a402402e-02a9-412c-ba2f-6576be0b4da8');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '694422f0-4aa0-442d-a642-d973c34698b6');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', 'fd851935-7bb0-4d1d-a3d5-f032a6e2f5e7');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '2f1989ba-60bd-48d9-a00e-ae1767a9cf0b');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '8a5ea125-4c9c-4a5f-bc59-ab0dd0239cf8');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '7ad954fa-610d-4419-8a89-cd05c2e1208d');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '1c0febd3-87c9-4622-864f-70154b2bba0a');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', 'dff793e1-956d-4176-8177-4fcfee857823');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', 'f7b84d7a-c513-4082-b42d-6c7d7290d6d5');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '67396d02-cf3f-482a-8916-5270a8186ac1');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '93c35938-5316-424e-88cb-34b8e5e466c2');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '1e78b4fb-511c-4b4b-ac67-f47ebac4e632');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '60e2d3fa-9f1d-474f-ab88-bec2f3d95946');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '96330fc0-3701-4e38-8f51-4b7b9e90f472');
INSERT INTO public.user_games VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', '71438f4f-aa62-43df-84aa-9e3d0a76c1c1');
INSERT INTO public.user_games VALUES ('c223ec03-65ad-454e-93e4-ee0eb84dac29', 'b979dba2-7c0a-4f05-a307-56a7e40d74fb');


--
-- TOC entry 3286 (class 0 OID 75638)
-- Dependencies: 231
-- Data for Name: user_purses; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_purses VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 999923.10999999999, 0, 0);
INSERT INTO public.user_purses VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', 900.12, 0, 0);
INSERT INTO public.user_purses VALUES ('9efe4580-8ff2-4974-a16e-c8796cf34f2b', 0, 0, 0);
INSERT INTO public.user_purses VALUES ('c223ec03-65ad-454e-93e4-ee0eb84dac29', 9, 0, 0);
INSERT INTO public.user_purses VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', 23.925000008940692, 0, 0);


--
-- TOC entry 3280 (class 0 OID 74953)
-- Dependencies: 225
-- Data for Name: user_sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_sessions VALUES ('2019-01-02 13:47:32.225828+03', 'ad44e23cfa43653b6b6c7e3b9f41a2adf3d6a98d', 'bf5537f0-230e-40ed-ba13-a2db24296d2c', '47da02c5-adde-484b-940a-bf99c92ac927');


--
-- TOC entry 3285 (class 0 OID 75622)
-- Dependencies: 230
-- Data for Name: user_statuses; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_statuses VALUES ('55f46ab6-a2af-4ee2-877e-7fa8faa36f33', 4);
INSERT INTO public.user_statuses VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 4);
INSERT INTO public.user_statuses VALUES ('9efe4580-8ff2-4974-a16e-c8796cf34f2b', 0);
INSERT INTO public.user_statuses VALUES ('47da02c5-adde-484b-940a-bf99c92ac927', 16);
INSERT INTO public.user_statuses VALUES ('c223ec03-65ad-454e-93e4-ee0eb84dac29', 1);


--
-- TOC entry 3263 (class 0 OID 16534)
-- Dependencies: 208
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.users VALUES ('$2a$08$aWlH3Wz28WzeLZfWWQuWKurX3TUA.s2HrVJtcLiWd0u6GiDOSvRy2', '$2a$08$tUkR1OKDx3CHqteQRK.xBu/TNaE40LXPt1wxDu/P/7E975VkT7eYu', 0, 'User deleted', '00000000-0000-0000-0000-000000000000');
INSERT INTO public.users VALUES ('$2a$08$mptenzkNImH8T4UzX9OAou8t41NvmHRl3buZBW0lAyWiMzeymlCRa', '$2a$08$f7/FmDddxcMIpIUIG6bb0.Fa04ZMmsDn8gYgPQAea.eVtTu54FoaG', 0, 'test1234', '4f172498-92a7-4cc7-91b7-cf1787eb8ab1');
INSERT INTO public.users VALUES ('$2a$08$8DFX3bWXhmfNuw3qiTYBEeyCFywa9r/XK8WHw0JbFtnENXHEirCZC', '$2a$08$GsZgtRWH8RF98WWBrMBuzOACgPhBAhSpE8ym44xD6Vg6d1INTMi1K', 0, 'Test_user', '55f46ab6-a2af-4ee2-877e-7fa8faa36f33');
INSERT INTO public.users VALUES ('$2a$08$ENvQw3I6LgvRUZVJz/GyXeZNCOjplpzg870WjKX6EktBh/B7k8DIC', '$2a$08$YSQeAzRwsACqRnK9q9kyhO9FnI9/nZLXp6NBw9u8IPjH/w.01pvjm', 0, 'Admin', '9efe4580-8ff2-4974-a16e-c8796cf34f2b');
INSERT INTO public.users VALUES ('$2a$08$hTD45Hf80DvIVxuRTOSGteTmxElx5PJkurWtFMd3/sRL9c.x9mpt2', '$2a$08$5DzmLlVfEJRZCrIarG/1tuICmh7C2wcasDyoCsJISvjLEVcwY5QBW', 0, 'Андрюша', '47da02c5-adde-484b-940a-bf99c92ac927');
INSERT INTO public.users VALUES ('$2a$08$8kkpwuqO.g/JSVleF5aFqeJg/pAdomRwo/bfpTQWJbNGvLmFiEVYW', '$2a$08$UsHa.HSkuevuMhl/bWcli.He1E7NVSniD8wQtr8AFOekGK8ZsmUpK', 0, 'Мусик пусик', 'c223ec03-65ad-454e-93e4-ee0eb84dac29');


--
-- TOC entry 3282 (class 0 OID 75542)
-- Dependencies: 227
-- Data for Name: users_developers; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.users_developers VALUES ('4f172498-92a7-4cc7-91b7-cf1787eb8ab1', 9, true);


--
-- TOC entry 3309 (class 0 OID 0)
-- Dependencies: 205
-- Name: devices_pk_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.devices_pk_id_seq', 1, false);


--
-- TOC entry 3310 (class 0 OID 0)
-- Dependencies: 201
-- Name: genres_pk_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.genres_pk_id_seq', 1, false);


--
-- TOC entry 3311 (class 0 OID 0)
-- Dependencies: 199
-- Name: maker_pk_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.maker_pk_id_seq', 9, true);


--
-- TOC entry 3312 (class 0 OID 0)
-- Dependencies: 209
-- Name: roles_pk_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.roles_pk_id_seq', 1, false);


--
-- TOC entry 3313 (class 0 OID 0)
-- Dependencies: 228
-- Name: statuses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.statuses_id_seq', 5, true);


--
-- TOC entry 3314 (class 0 OID 0)
-- Dependencies: 213
-- Name: tags_pk_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tags_pk_id_seq', 1, false);


--
-- TOC entry 3042 (class 2606 OID 75088)
-- Name: commentaries commentaries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.commentaries
    ADD CONSTRAINT commentaries_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3036 (class 2606 OID 75112)
-- Name: desired_games desired_games_id_uuid_game_id_uuid_user_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.desired_games
    ADD CONSTRAINT desired_games_id_uuid_game_id_uuid_user_key UNIQUE (id_uuid_game, id_uuid_user);


--
-- TOC entry 3072 (class 2606 OID 75820)
-- Name: developer_status_purchases developer_status_purchases_id_developer_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.developer_status_purchases
    ADD CONSTRAINT developer_status_purchases_id_developer_key UNIQUE (id_developer);


--
-- TOC entry 3074 (class 2606 OID 75822)
-- Name: developer_status_purchases developer_status_purchases_id_uuid_purchase_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.developer_status_purchases
    ADD CONSTRAINT developer_status_purchases_id_uuid_purchase_key UNIQUE (id_uuid_purchase);


--
-- TOC entry 3006 (class 2606 OID 16517)
-- Name: devices devices_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.devices
    ADD CONSTRAINT devices_pkey PRIMARY KEY (id);


--
-- TOC entry 3070 (class 2606 OID 75826)
-- Name: game_addon_purchases game_addon_purchases_id_uuid_purchase_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.game_addon_purchases
    ADD CONSTRAINT game_addon_purchases_id_uuid_purchase_key UNIQUE (id_uuid_purchase);


--
-- TOC entry 3068 (class 2606 OID 75824)
-- Name: game_purchases game_purchases_id_uuid_purchase_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.game_purchases
    ADD CONSTRAINT game_purchases_id_uuid_purchase_key UNIQUE (id_uuid_purchase);


--
-- TOC entry 3034 (class 2606 OID 75140)
-- Name: games_addons_list games_addons_list_id_uuid_game_id_uuid_addon_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_addons_list
    ADD CONSTRAINT games_addons_list_id_uuid_game_id_uuid_addon_key UNIQUE (id_uuid_game, id_uuid_addon);


--
-- TOC entry 3004 (class 2606 OID 75120)
-- Name: games_addons games_addons_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_addons
    ADD CONSTRAINT games_addons_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3044 (class 2606 OID 75191)
-- Name: games_commentaries games_commentaries_id_uuid_game_id_uuid_comment_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_commentaries
    ADD CONSTRAINT games_commentaries_id_uuid_game_id_uuid_comment_key UNIQUE (id_uuid_game, id_uuid_comment);


--
-- TOC entry 2990 (class 2606 OID 75117)
-- Name: games games_game_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games
    ADD CONSTRAINT games_game_name_key UNIQUE (game_name);


--
-- TOC entry 2992 (class 2606 OID 75575)
-- Name: games games_game_name_key1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games
    ADD CONSTRAINT games_game_name_key1 UNIQUE (game_name);


--
-- TOC entry 3002 (class 2606 OID 75198)
-- Name: games_genres_list games_genres_list_id_uuid_game_id_genre_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_genres_list
    ADD CONSTRAINT games_genres_list_id_uuid_game_id_genre_key UNIQUE (id_uuid_game, id_genre);


--
-- TOC entry 3040 (class 2606 OID 75201)
-- Name: games_images games_images_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_images
    ADD CONSTRAINT games_images_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3046 (class 2606 OID 75287)
-- Name: games_news_commentaries games_news_commentaries_id_uuid_comment_id_uuid_games_news_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_news_commentaries
    ADD CONSTRAINT games_news_commentaries_id_uuid_comment_id_uuid_games_news_key UNIQUE (id_uuid_comment, id_uuid_games_news);


--
-- TOC entry 3022 (class 2606 OID 75285)
-- Name: games_news games_news_id_uuid_news_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_news
    ADD CONSTRAINT games_news_id_uuid_news_key UNIQUE (id_uuid_news);


--
-- TOC entry 3024 (class 2606 OID 75216)
-- Name: games_news games_news_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_news
    ADD CONSTRAINT games_news_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 2994 (class 2606 OID 75056)
-- Name: games games_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games
    ADD CONSTRAINT games_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3056 (class 2606 OID 75339)
-- Name: games_ratings games_ratings_id_uuid_game_id_uuid_user_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_ratings
    ADD CONSTRAINT games_ratings_id_uuid_game_id_uuid_user_key UNIQUE (id_uuid_game, id_uuid_user);


--
-- TOC entry 3080 (class 2606 OID 92306)
-- Name: games_statistics games_statistics_id_uuid_game_counting_year_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_statistics
    ADD CONSTRAINT games_statistics_id_uuid_game_counting_year_key UNIQUE (id_uuid_game, counting_year);


--
-- TOC entry 3008 (class 2606 OID 75667)
-- Name: games_supported_devices games_supported_devices_id_uuid_game_id_device_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_supported_devices
    ADD CONSTRAINT games_supported_devices_id_uuid_game_id_device_key UNIQUE (id_uuid_game, id_device);


--
-- TOC entry 3032 (class 2606 OID 75679)
-- Name: games_tags_list games_tags_list_id_uuid_game_id_tag_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_tags_list
    ADD CONSTRAINT games_tags_list_id_uuid_game_id_tag_key UNIQUE (id_uuid_game, id_tag);


--
-- TOC entry 3000 (class 2606 OID 16437)
-- Name: games_genres genres_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_genres
    ADD CONSTRAINT genres_pkey PRIMARY KEY (id);


--
-- TOC entry 3048 (class 2606 OID 75324)
-- Name: global_news_commentaries global_news_commentaries_id_uuid_comment_id_uuid_global_new_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.global_news_commentaries
    ADD CONSTRAINT global_news_commentaries_id_uuid_comment_id_uuid_global_new_key UNIQUE (id_uuid_comment, id_uuid_global_news);


--
-- TOC entry 3026 (class 2606 OID 75278)
-- Name: global_news global_news_id_uuid_news_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.global_news
    ADD CONSTRAINT global_news_id_uuid_news_key UNIQUE (id_uuid_news);


--
-- TOC entry 3028 (class 2606 OID 75271)
-- Name: global_news global_news_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.global_news
    ADD CONSTRAINT global_news_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 2996 (class 2606 OID 16424)
-- Name: developers maker_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.developers
    ADD CONSTRAINT maker_pkey PRIMARY KEY (id);


--
-- TOC entry 2998 (class 2606 OID 75785)
-- Name: developers makers_maker_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.developers
    ADD CONSTRAINT makers_maker_name_key UNIQUE (developer_name);


--
-- TOC entry 3050 (class 2606 OID 75036)
-- Name: news news_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.news
    ADD CONSTRAINT news_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3038 (class 2606 OID 75078)
-- Name: purchases purchases_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT purchases_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3020 (class 2606 OID 16552)
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (id);


--
-- TOC entry 3060 (class 2606 OID 75619)
-- Name: statuses statuses_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.statuses
    ADD CONSTRAINT statuses_pkey PRIMARY KEY (id);


--
-- TOC entry 3062 (class 2606 OID 75621)
-- Name: statuses statuses_status_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.statuses
    ADD CONSTRAINT statuses_status_name_key UNIQUE (status_name);


--
-- TOC entry 3030 (class 2606 OID 16597)
-- Name: games_tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- TOC entry 3078 (class 2606 OID 75847)
-- Name: user_game_addons user_game_addons_id_uuid_user_id_uuid_game_addon_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_game_addons
    ADD CONSTRAINT user_game_addons_id_uuid_user_id_uuid_game_addon_key UNIQUE (id_uuid_user, id_uuid_game_addon);


--
-- TOC entry 3076 (class 2606 OID 75832)
-- Name: user_games user_games_id_uuid_user_id_uuid_game_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_games
    ADD CONSTRAINT user_games_id_uuid_user_id_uuid_game_key UNIQUE (id_uuid_user, id_uuid_game);


--
-- TOC entry 3066 (class 2606 OID 75647)
-- Name: user_purses user_purses_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_purses
    ADD CONSTRAINT user_purses_pkey PRIMARY KEY (id_uuid_user);


--
-- TOC entry 3052 (class 2606 OID 75019)
-- Name: user_sessions user_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_sessions
    ADD CONSTRAINT user_sessions_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3054 (class 2606 OID 74964)
-- Name: user_sessions user_sessions_token_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_sessions
    ADD CONSTRAINT user_sessions_token_key UNIQUE (token);


--
-- TOC entry 3064 (class 2606 OID 75626)
-- Name: user_statuses user_statuses_id_uuid_user_id_status_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_statuses
    ADD CONSTRAINT user_statuses_id_uuid_user_id_status_key UNIQUE (id_uuid_user, id_status);


--
-- TOC entry 3058 (class 2606 OID 75793)
-- Name: users_developers users_developers_id_uuid_user_id_developer_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_developers
    ADD CONSTRAINT users_developers_id_uuid_user_id_developer_key UNIQUE (id_uuid_user, id_developer);


--
-- TOC entry 3010 (class 2606 OID 75008)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id_uuid);


--
-- TOC entry 3012 (class 2606 OID 74944)
-- Name: users users_user_login_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_login_key UNIQUE (user_login);


--
-- TOC entry 3014 (class 2606 OID 74942)
-- Name: users users_user_login_key1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_login_key1 UNIQUE (user_login);


--
-- TOC entry 3016 (class 2606 OID 74940)
-- Name: users users_user_login_key2; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_login_key2 UNIQUE (user_login);


--
-- TOC entry 3018 (class 2606 OID 74949)
-- Name: users users_user_nickname_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_nickname_key UNIQUE (user_nickname);


--
-- TOC entry 2988 (class 1259 OID 16461)
-- Name: fki_fk_maker; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fki_fk_maker ON public.games USING btree (id_developer);


--
-- TOC entry 3124 (class 2620 OID 75775)
-- Name: games trigger_on_add_new_game; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_add_new_game AFTER INSERT ON public.games FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_add_new_game();


--
-- TOC entry 3129 (class 2620 OID 75685)
-- Name: user_purses trigger_on_buy; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_buy BEFORE UPDATE OF user_money ON public.user_purses FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_buy();


--
-- TOC entry 3131 (class 2620 OID 92366)
-- Name: user_games trigger_on_buy_new_desired_game; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_buy_new_desired_game AFTER INSERT ON public.user_games FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_buy_new_desired_game();


--
-- TOC entry 3130 (class 2620 OID 92356)
-- Name: user_games trigger_on_buy_new_game; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_buy_new_game AFTER INSERT ON public.user_games FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_buy_new_game();


--
-- TOC entry 3126 (class 2620 OID 75860)
-- Name: users trigger_on_delete_account; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_delete_account BEFORE DELETE ON public.users FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_delete_account();


--
-- TOC entry 3127 (class 2620 OID 84028)
-- Name: commentaries trigger_on_delete_comment; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_delete_comment BEFORE DELETE ON public.commentaries FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_delete_comment();


--
-- TOC entry 3125 (class 2620 OID 75773)
-- Name: users trigger_on_register_user; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_register_user AFTER INSERT ON public.users FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_register_user();


--
-- TOC entry 3128 (class 2620 OID 75601)
-- Name: user_sessions trigger_on_user_login; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_on_user_login BEFORE INSERT OR UPDATE ON public.user_sessions FOR EACH ROW EXECUTE PROCEDURE public.trigger_function_on_user_login();


--
-- TOC entry 3097 (class 2606 OID 75096)
-- Name: commentaries commentaries_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.commentaries
    ADD CONSTRAINT commentaries_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3093 (class 2606 OID 75101)
-- Name: desired_games desired_games_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.desired_games
    ADD CONSTRAINT desired_games_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3094 (class 2606 OID 75106)
-- Name: desired_games desired_games_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.desired_games
    ADD CONSTRAINT desired_games_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3117 (class 2606 OID 75809)
-- Name: developer_status_purchases developer_status_purchases_id_developer_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.developer_status_purchases
    ADD CONSTRAINT developer_status_purchases_id_developer_fkey FOREIGN KEY (id_developer) REFERENCES public.developers(id);


--
-- TOC entry 3118 (class 2606 OID 75814)
-- Name: developer_status_purchases developer_status_purchases_id_uuid_purchase_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.developer_status_purchases
    ADD CONSTRAINT developer_status_purchases_id_uuid_purchase_fkey FOREIGN KEY (id_uuid_purchase) REFERENCES public.purchases(id_uuid);


--
-- TOC entry 3081 (class 2606 OID 16456)
-- Name: games fk_maker; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games
    ADD CONSTRAINT fk_maker FOREIGN KEY (id_developer) REFERENCES public.developers(id);


--
-- TOC entry 3086 (class 2606 OID 16557)
-- Name: users fk_role; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT fk_role FOREIGN KEY (id_role) REFERENCES public.roles(id);


--
-- TOC entry 3115 (class 2606 OID 75760)
-- Name: game_addon_purchases game_addon_purchases_id_uuid_game_addon_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.game_addon_purchases
    ADD CONSTRAINT game_addon_purchases_id_uuid_game_addon_fkey FOREIGN KEY (id_uuid_game_addon) REFERENCES public.games_addons(id_uuid);


--
-- TOC entry 3116 (class 2606 OID 75765)
-- Name: game_addon_purchases game_addon_purchases_id_uuid_purchase_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.game_addon_purchases
    ADD CONSTRAINT game_addon_purchases_id_uuid_purchase_fkey FOREIGN KEY (id_uuid_purchase) REFERENCES public.purchases(id_uuid);


--
-- TOC entry 3113 (class 2606 OID 75730)
-- Name: game_purchases game_purchases_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.game_purchases
    ADD CONSTRAINT game_purchases_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3114 (class 2606 OID 75735)
-- Name: game_purchases game_purchases_id_uuid_purchase_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.game_purchases
    ADD CONSTRAINT game_purchases_id_uuid_purchase_fkey FOREIGN KEY (id_uuid_purchase) REFERENCES public.purchases(id_uuid);


--
-- TOC entry 3092 (class 2606 OID 75134)
-- Name: games_addons_list games_addons_list_id_uuid_addon_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_addons_list
    ADD CONSTRAINT games_addons_list_id_uuid_addon_fkey FOREIGN KEY (id_uuid_addon) REFERENCES public.games_addons(id_uuid);


--
-- TOC entry 3091 (class 2606 OID 75129)
-- Name: games_addons_list games_addons_list_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_addons_list
    ADD CONSTRAINT games_addons_list_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3099 (class 2606 OID 75185)
-- Name: games_commentaries games_commentaries_id_uuid_comment_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_commentaries
    ADD CONSTRAINT games_commentaries_id_uuid_comment_fkey FOREIGN KEY (id_uuid_comment) REFERENCES public.commentaries(id_uuid);


--
-- TOC entry 3098 (class 2606 OID 75180)
-- Name: games_commentaries games_commentaries_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_commentaries
    ADD CONSTRAINT games_commentaries_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3083 (class 2606 OID 75325)
-- Name: games_genres_list games_genres_list_id_genre_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_genres_list
    ADD CONSTRAINT games_genres_list_id_genre_fkey FOREIGN KEY (id_genre) REFERENCES public.games_genres(id);


--
-- TOC entry 3082 (class 2606 OID 75192)
-- Name: games_genres_list games_genres_list_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_genres_list
    ADD CONSTRAINT games_genres_list_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3096 (class 2606 OID 75209)
-- Name: games_images games_images_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_images
    ADD CONSTRAINT games_images_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3100 (class 2606 OID 75227)
-- Name: games_news_commentaries games_news_commentaries_id_uuid_comment_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_news_commentaries
    ADD CONSTRAINT games_news_commentaries_id_uuid_comment_fkey FOREIGN KEY (id_uuid_comment) REFERENCES public.commentaries(id_uuid);


--
-- TOC entry 3101 (class 2606 OID 75232)
-- Name: games_news_commentaries games_news_commentaries_id_uuid_games_news_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_news_commentaries
    ADD CONSTRAINT games_news_commentaries_id_uuid_games_news_fkey FOREIGN KEY (id_uuid_games_news) REFERENCES public.games_news(id_uuid);


--
-- TOC entry 3087 (class 2606 OID 75222)
-- Name: games_news games_news_id_uuid_news_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_news
    ADD CONSTRAINT games_news_id_uuid_news_fkey FOREIGN KEY (id_uuid_news) REFERENCES public.news(id_uuid);


--
-- TOC entry 3106 (class 2606 OID 75340)
-- Name: games_ratings games_ratings_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_ratings
    ADD CONSTRAINT games_ratings_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3107 (class 2606 OID 75345)
-- Name: games_ratings games_ratings_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_ratings
    ADD CONSTRAINT games_ratings_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3123 (class 2606 OID 92307)
-- Name: games_statistics games_statistics_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_statistics
    ADD CONSTRAINT games_statistics_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3085 (class 2606 OID 75661)
-- Name: games_supported_devices games_supported_devices_id_device_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_supported_devices
    ADD CONSTRAINT games_supported_devices_id_device_fkey FOREIGN KEY (id_device) REFERENCES public.devices(id);


--
-- TOC entry 3084 (class 2606 OID 75656)
-- Name: games_supported_devices games_supported_devices_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_supported_devices
    ADD CONSTRAINT games_supported_devices_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3090 (class 2606 OID 75673)
-- Name: games_tags_list games_tags_list_id_tag_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_tags_list
    ADD CONSTRAINT games_tags_list_id_tag_fkey FOREIGN KEY (id_tag) REFERENCES public.games_tags(id);


--
-- TOC entry 3089 (class 2606 OID 75668)
-- Name: games_tags_list games_tags_list_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.games_tags_list
    ADD CONSTRAINT games_tags_list_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3102 (class 2606 OID 75313)
-- Name: global_news_commentaries global_news_commentaries_id_uuid_comment_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.global_news_commentaries
    ADD CONSTRAINT global_news_commentaries_id_uuid_comment_fkey FOREIGN KEY (id_uuid_comment) REFERENCES public.commentaries(id_uuid);


--
-- TOC entry 3103 (class 2606 OID 75318)
-- Name: global_news_commentaries global_news_commentaries_id_uuid_global_news_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.global_news_commentaries
    ADD CONSTRAINT global_news_commentaries_id_uuid_global_news_fkey FOREIGN KEY (id_uuid_global_news) REFERENCES public.global_news(id_uuid);


--
-- TOC entry 3088 (class 2606 OID 75279)
-- Name: global_news global_news_id_uuid_news_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.global_news
    ADD CONSTRAINT global_news_id_uuid_news_fkey FOREIGN KEY (id_uuid_news) REFERENCES public.news(id_uuid);


--
-- TOC entry 3104 (class 2606 OID 75044)
-- Name: news news_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.news
    ADD CONSTRAINT news_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3095 (class 2606 OID 75049)
-- Name: purchases purchases_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT purchases_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3121 (class 2606 OID 75853)
-- Name: user_game_addons user_game_addons_id_uuid_game_addon_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_game_addons
    ADD CONSTRAINT user_game_addons_id_uuid_game_addon_fkey FOREIGN KEY (id_uuid_game_addon) REFERENCES public.games_addons(id_uuid);


--
-- TOC entry 3122 (class 2606 OID 75848)
-- Name: user_game_addons user_game_addons_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_game_addons
    ADD CONSTRAINT user_game_addons_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3119 (class 2606 OID 75838)
-- Name: user_games user_games_id_uuid_game_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_games
    ADD CONSTRAINT user_games_id_uuid_game_fkey FOREIGN KEY (id_uuid_game) REFERENCES public.games(id_uuid);


--
-- TOC entry 3120 (class 2606 OID 75833)
-- Name: user_games user_games_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_games
    ADD CONSTRAINT user_games_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3112 (class 2606 OID 75648)
-- Name: user_purses user_purses_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_purses
    ADD CONSTRAINT user_purses_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3105 (class 2606 OID 75029)
-- Name: user_sessions user_sessions_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_sessions
    ADD CONSTRAINT user_sessions_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3111 (class 2606 OID 75632)
-- Name: user_statuses user_statuses_id_status_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_statuses
    ADD CONSTRAINT user_statuses_id_status_fkey FOREIGN KEY (id_status) REFERENCES public.statuses(id);


--
-- TOC entry 3110 (class 2606 OID 75627)
-- Name: user_statuses user_statuses_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_statuses
    ADD CONSTRAINT user_statuses_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3109 (class 2606 OID 75553)
-- Name: users_developers users_developers_id_developer_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_developers
    ADD CONSTRAINT users_developers_id_developer_fkey FOREIGN KEY (id_developer) REFERENCES public.developers(id);


--
-- TOC entry 3108 (class 2606 OID 75548)
-- Name: users_developers users_developers_id_uuid_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_developers
    ADD CONSTRAINT users_developers_id_uuid_user_fkey FOREIGN KEY (id_uuid_user) REFERENCES public.users(id_uuid);


--
-- TOC entry 3299 (class 0 OID 0)
-- Dependencies: 5
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA public TO group_users;


--
-- TOC entry 3300 (class 0 OID 0)
-- Dependencies: 293
-- Name: FUNCTION function_get_games_list_with_authors(p_offset integer, p_limit integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.function_get_games_list_with_authors(p_offset integer, p_limit integer) TO group_users WITH GRANT OPTION;


-- Completed on 2019-01-02 14:03:29

--
-- PostgreSQL database dump complete
--

